Exercise 1: Data Frame Practice
# Install devtools package: allows installations from GitHub
install.packages('devtools')
# Install "fueleconomy" package from GitHub
devtools::install_github("hadley/fueleconomy")
# Require/library the fueleconomy package
library(fueleconomy)
# You should have have access to the `vehicles` data.frame
View(vehicles)
# Exercise 2: Data Frame Practice with `dplyr`.
# Use a different appraoch to accomplish the same tasks as exercise-1
# Install devtools package: allows installations from GitHub
install.packages('devtools')
# Install "fueleconomy" package from GitHub
devtools::install_github("hadley/fueleconomy")
# Require/library the fueleconomy package
library(fueleconomy)
# You should have have access to the `vehicles` data.frame
View(vehicles)
# Create a data.frame of vehicles from 1997
vehicles1997 <- filter(vehicles, year %in% c(1997))
install.packages("devtools")
# You should have have access to the `vehicles` data.frame
View(vehicles)
# Create a data.frame of vehicles from 1997
vehicles1997 <- filter(vehicles, year %in% c(1997))
View(vehicles)
# Require/library the fueleconomy package
library(fueleconomy)
# You should have have access to the `vehicles` data.frame
View(vehicles)
# Create a data.frame of vehicles from 1997
vehicles1997 <- filter(vehicles, year %in% c(1997))
# Require/library the fueleconomy package
library(fueleconomy)
library(dplry)
# You should have have access to the `vehicles` data.frame
View(vehicles)
# Create a data.frame of vehicles from 1997
vehicles1997 <- filter(vehicles, year %in% c(1997))
library(dplry)
library('dplry')
library(DPLYR)
# Exercise 2: Data Frame Practice with `dplyr`.
# Use a different appraoch to accomplish the same tasks as exercise-1
# Install devtools package: allows installations from GitHub
install.packages('devtools')
install.packages('dplyr')
install.packages('dplyr')
library('dplyr')
# You should have have access to the `vehicles` data.frame
View(vehicles)
# Create a data.frame of vehicles from 1997
vehicles1997 <- filter(vehicles, year %in% c(1997))
library(fueleconomy)
# You should have have access to the `vehicles` data.frame
View(vehicles)
library(fueleconomy)
# You should have have access to the `vehicles` data.frame
View(vehicles)
# Create a data.frame of vehicles from 1997
vehicles1997 <- filter(vehicles, year %in% c(1997))
View(vehicles1997)
View(vehicles)
View(vehicles1997)
# Require/library the fueleconomy package
library(fueleconomy)
# You should have have access to the `vehicles` data.frame
View(vehicles)
# Create a data.frame of vehicles from 1997
vehicles1997 <- filter(vehicles, year %in% c(1997))
# Use the `unique` function to verify that there is only 1 value in the `year` column of your new data.frame
unique(vehicles1997, incomparables = FALSE)
# Require/library the fueleconomy package
library(fueleconomy)
# You should have have access to the `vehicles` data.frame
View(vehicles)
# Create a data.frame of vehicles from 1997
vehicles1997 <- filter(vehicles, year %in% c(1997))
# Use the `unique` function to verify that there is only 1 value in the `year` column of your new data.frame
unique(vehicles1997$year == 1997)
library(fueleconomy)
# You should have have access to the `vehicles` data.frame
View(vehicles)
# Create a data.frame of vehicles from 1997
vehicles1997 <- filter(vehicles, year %in% c(1997))
# Use the `unique` function to verify that there is only 1 value in the `year` column of your new data.frame
unique(vehicles1997$year == 1997)
# Create a data.frame of 2-Wheel Drive vehicles that get more than 20 miles/gallon in the city
2Wheel <- filter(vehicles, drive %in% c('2-Wheel Drive'))
city <- filter(2Wheel, city %in% c(20))
# Require/library the fueleconomy package
library(fueleconomy)
# You should have have access to the `vehicles` data.frame
View(vehicles)
# Create a data.frame of vehicles from 1997
vehicles1997 <- filter(vehicles, year %in% c(1997))
# Use the `unique` function to verify that there is only 1 value in the `year` column of your new data.frame
unique(vehicles1997$year == 1997)
# Create a data.frame of 2-Wheel Drive vehicles that get more than 20 miles/gallon in the city
Wheel <- filter(vehicles, drive %in% c('2-Wheel Drive'))
#city <- filter(2Wheel, city %in% c(20))
View(Wheel)
# Require/library the fueleconomy package
library(fueleconomy)
# You should have have access to the `vehicles` data.frame
View(vehicles)
# Create a data.frame of vehicles from 1997
vehicles1997 <- filter(vehicles, year %in% c(1997))
# Use the `unique` function to verify that there is only 1 value in the `year` column of your new data.frame
unique(vehicles1997$year == 1997)
# Create a data.frame of 2-Wheel Drive vehicles that get more than 20 miles/gallon in the city
Wheel <- filter(vehicles, drive %in% c('2-Wheel Drive'))
city <- filter(Wheel, city %in% c(20))
# Require/library the fueleconomy package
library(fueleconomy)
# You should have have access to the `vehicles` data.frame
View(vehicles)
# Create a data.frame of vehicles from 1997
vehicles1997 <- filter(vehicles, year %in% c(1997))
# Use the `unique` function to verify that there is only 1 value in the `year` column of your new data.frame
unique(vehicles1997$year == 1997)
# Create a data.frame of 2-Wheel Drive vehicles that get more than 20 miles/gallon in the city
Wheel <- filter(vehicles, drive %in% c('2-Wheel Drive'))
city <- filter(Wheel, cty %in% c(20))
View(city)
# Require/library the fueleconomy package
library(fueleconomy)
# Which Accura model has the best hwy MPG in 2015? (without method chaining)
in2015 <- filter(vehicles, year == 2015)
hwy <- filter(in2015, hwy == max(hwy))
accura <- filter(hwy, model == 'Accura')
View(accura)
View(hwy)
# Require/library the fueleconomy package
library(fueleconomy)
# Which Accura model has the best hwy MPG in 2015? (without method chaining)
in2015 <- filter(vehicles, year == 2015)
accura <- filter(in2015, model == 'Accura')
hwy <- filter(accura, hwy == max(hwy))
View(hwy)
View(accura)
View(in2015)
# Require/library the fueleconomy package
library(fueleconomy)
# Which Accura model has the best hwy MPG in 2015? (without method chaining)
in2015 <- filter(vehicles, year == 2015)
accura <- filter(in2015, make == 'Accura')
hwy <- filter(accura, hwy == max(hwy))
View(hwy)
View(accura)
# Require/library the fueleconomy package
library(fueleconomy)
# Which Acura model has the best hwy MPG in 2015? (without method chaining)
in2015 <- filter(vehicles, year == 2015)
accura <- filter(in2015, make == 'Acura')
hwy <- filter(accura, hwy == max(hwy))
View(hwy)
movie <- 'Almost Famous'
# Chunk 1
### Exercise 1 ###
library(jsonlite)
library(dplyr)
# Store a variable "movie"
movie <- 'Almost Famous'
# Write a function that allows you to specify a movie, then does the following:
GetReview <- function(movie) {
# Replace all of the spaces in your movie title with plus signs (+)
movie.no.spaces <- gsub(' ', '+', movie)
# Construct a search query using YOUR api key
# The base URL is https://api.nytimes.com/svc/movies/v2/reviews/search.json?
# See the interactive console for more detail:https://developer.nytimes.com/movie_reviews_v2.json#/Console/GET/reviews/search.json
base.url <- https://api.nytimes.com/svc/movies/v2/reviews/search.json?
api.key <- '&api-key=2d3963db35bb4d0f88f17a193b8c62e8'
request <- paste0(base.url, 'query=', movie.no.spaces, api.key)
# Request data using your search query
results <- fromJSON(request)
# Flatten the data stored in the `$results` key of the data returned to you
flattened <- flatten(results$results)
# From the most recent review, store the headline, short summary, and link to full article each in their own variables
first.review <- flattened [1,]
headline <- first.review$headline
summary <- first.review$summary_short
link <- first.review$link.url
# Return an list of the three pieces of information from above
info <- list(headline = headline, summary = summary, link = link)
return(info)
}
# Create a variable called `movie.info` by passing your movie to your GetReview function
movie.info <- GetReview(movie)
shiny::runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
df5[1,1]
df3[1,1]
df3[1,3]
df3['AL',]
df3[,"Gastrointestinal"]
df3['AL',]
df3['AL', 'Eye']
df3[ncol('AL'),]
df3[rownames('AL'', )]
runApp('Desktop/Kate')
summarise(Gastrointestinal = sum(Gastrointestinal))
address <- read.csv('~/Desktop/kate/data/Survey.csv',stringsAsFactors = FALSE)
procedures <- read.csv('~/Desktop/kate/data/Procedures.csv',stringsAsFactors = FALSE)
df4 = address %>% distinct_(~Hospital.Name,~State)
df5 <- left_join(df4, procedures,by = "Hospital.Name") %>%
filter_(~Gastrointestinal != "Not Available") %>%
filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,State,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
#arrange by state and has all the procedures
df3 <- df5 %>% group_by_(~State) %>%
select(State,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
#procedures$Hospital.Name <- factor(procedures$Hospital.Name, levels = procedures$Hospital.Name[order(procedures$Skin)])
dumbell <- function(this.data) {
newChart <- df3 %>% group_by(State) %>%
summarise(Gastrointestinal = sum(Gastrointestinal))
}
View(newChart)
summarise(Gastrointestinal = sum(Gastrointestinal))
library(plotly)
packageVersion(('plotly'))
address <- read.csv('~/Desktop/kate/data/Survey.csv',stringsAsFactors = FALSE)
procedures <- read.csv('~/Desktop/kate/data/Procedures.csv',stringsAsFactors = FALSE)
df4 = address %>% distinct_(~Hospital.Name,~State)
df5 <- left_join(df4, procedures,by = "Hospital.Name") %>%
filter_(~Gastrointestinal != "Not Available") %>%
filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,State,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
#arrange by state and has all the procedures
df3 <- df5 %>% group_by_(~State) %>%
select(State,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
#procedures$Hospital.Name <- factor(procedures$Hospital.Name, levels = procedures$Hospital.Name[order(procedures$Skin)])
newChart <- df3 %>% group_by(State) %>%
summarise(Gastrointestinal = sum(Gastrointestinal))
dumbell <- function(this.data) {
newChart <- df3 %>% group_by(State) %>%
summarise(Gastrointestinal = sum(Gastrointestinal))
plot_ly(df3, color = I("gray80")) %>%
add_segments(x = ~Gastrointestinal, xend = ~Gastrointestinal, y = ~State, yend = ~State, showlegend = FALSE) %>%
#add_markers(x = ~Skin, y = ~State, name = "Skin", color = I("pink")) %>%
#add_markers(x = ~Other, y = ~State, name = "Other", color = I("blue")) %>%
layout(
title = "Gender earnings disparity",
xaxis = list(title = "Annual Salary (in thousands)"),
margin = list(l = 65)
)
}
View(newChart)
View(df3)
newChart <- df3 %>% group_by(State)
View(newChart)
filter(State %in% c('AL', 'AK'))
newChart <- df3 %>% group_by(State) %>%
filter(State %in% c('AL', 'AK'))
View(newChart)
select(State, Skin)
newChart <- df3 %>% group_by(State) %>%
filter(State %in% c('AL', 'AK')) %>%
select(State, Skin)
View(newChart)
newChart <- df3 %>% group_by(State) %>%
filter(State %in% c('AL', 'AK')) %>%
select(State, Skin) %>%
summarise(Skin = sum(Skin))
newChart <- df3 %>% group_by(State) %>%
filter(State %in% c('AL', 'AK')) %>%
select(State, Skin) %>%
summarise(Skin = sum(Skin))
newChart <- df3 %>% group_by(State) %>%
filter(State %in% c('AL', 'AK')) %>%
select(State, Skin) %>%
summarise(sum.Skin = sum(Skin))
newChart <- df3 %>% group_by(State) %>%
filter(State %in% c('AL', 'AK')) %>%
select(State, Skin) %>%
View(newChart)
newChart <- df3 %>% group_by(State) %>%
filter(State %in% c('AL', 'AK')) %>%
select(State, Skin)
View(newChart)
newChart <- df3 %>% group_by(State) %>%
filter(State 'AL' %>%
select(State, Skin) %>%
summarise(sum.skin = sum(Skin))
newChart <- df3 %>% group_by(State) %>%
filter(State == 'AL') %>%
select(State, Skin) %>%
summarise(sum.skin = sum(Skin))
newChart <- df3 %>% group_by(State) %>%
filter(State == 'AL') %>%
select(State, Skin)
View(newChart)
colsums(newChart)
colSums(newChart)
colSums(2)
newChart <- df3 %>% group_by(State) %>%
filter(State == 'AL') %>%
select(State, Skin) %>%
summarise(sum.Skin = sum(Skin))
sum.Skin <- sum(newChart$Skin)
newChart <- df3 %>% group_by(State) %>%
filter(State == 'AL') %>%
select(State, Skin) %>%
sum.Skin <- sum(newChart$Skin)
sum.Skin <- sum(df3$Skin)
sum.Skin <- sum(procedures$Skin)
newChart <- df3 %>% group_by(State) %>%
filter(State == 'AL') %>%
select(State, Skin) %>%
summarise(sum.skin = sum(as.numeric(Skin)))
View(newChart)
state.1 <- filter(df3, State == 'AL') %>%
select(State, Skin) %>%
summarise(sum.skin = sum(as.numeric(Skin)))
View(state.1)
state.1 <- filter(df3, State == 'AL') %>%
select(State, Skin) %>%
summarise(sum.skin = sum(as.numeric(Skin)))
state.2 <- filter(df3, State == 'AZ') %>%
select(state, Skin) %>%
summarise(sum.skin = sum(as.numberic(Skin)))
state.1 <- filter(df3, State == 'AL') %>%
select(State, Skin) %>%
summarise(sum.skin = sum(as.numeric(Skin)))
state.2 <- filter(df3, State == 'AZ') %>%
select(State, Skin) %>%
summarise(sum.skin = sum(as.numberic(Skin)))
state.1 <- filter(df3, State == 'AL') %>%
select(State, Skin) %>%
summarise(sum.skin = sum(as.numeric(Skin)))
state.2 <- filter(df3, State == 'AZ') %>%
select(State, Skin) %>%
summarise(sum.skin = sum(as.numeric(Skin)))
select.state <- filter(df3, State %in% c('AL','AZ')) %>%
select(State, Skin) %>%
summarise(sum.skin = sum(as.numberic(Skin)))
select.state <- filter(df3, State %in% c('AL','AZ')) %>%
select(State, Skin) %>%
summarise(sum.skin = sum(as.numeric(Skin)))
View(select.state)
source('~/.active-rstudio-document', echo=TRUE)
runApp('Desktop/Kate')
library(plotly)
packageVersion(('plotly'))
address <- read.csv('~/Desktop/kate/data/Survey.csv',stringsAsFactors = FALSE)
procedures <- read.csv('~/Desktop/kate/data/Procedures.csv',stringsAsFactors = FALSE)
df4 = address %>% distinct_(~Hospital.Name,~State)
df5 <- left_join(df4, procedures,by = "Hospital.Name") %>%
filter_(~Gastrointestinal != "Not Available") %>%
filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,State,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
#arrange by state and has all the procedures
df3 <- df5 %>% group_by_(~State) %>%
select(State,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
#procedures$Hospital.Name <- factor(procedures$Hospital.Name, levels = procedures$Hospital.Name[order(procedures$Skin)])
state.1 <- filter(df3, State == 'AL') %>%
select(State, Skin) %>%
summarise(sum.skin = sum(as.numeric(Skin)))
state.2 <- filter(df3, State == 'AZ') %>%
select(State, Skin) %>%
summarise(sum.skin = sum(as.numeric(Skin)))
select.state <- filter(df3, State %in% c('AL','AZ')) %>%
select(State, Skin) %>%
summarise(sum.skin = sum(as.numeric(Skin)))
dumbell <- function(this.data) {
#  newChart <- df3 %>% group_by(State) %>%
#    summarise(Gastrointestinal = sum(Gastrointestinal))
plot_ly(select.state, color = I("gray80")) %>%
add_segments(x = ~Skin, xend = ~Skin, y = ~State, yend = ~State, showlegend = FALSE) %>%
#add_markers(x = ~Skin, y = ~State, name = "Skin", color = I("pink")) %>%
#add_markers(x = ~Other, y = ~State, name = "Other", color = I("blue")) %>%
layout(
title = "Gender earnings disparity",
xaxis = list(title = "Annual Salary (in thousands)"),
margin = list(l = 65)
)
}
shiny::runApp('Desktop/Kate')
runApp('Desktop/Kate')
all.state <- select(df3, State, Skin) %>%
summarise(sum.skin = sum(as.numeric(Skin)))
View(all.state)
runApp('Desktop/Kate')
all.state <- select(df3, State, Skin) %>%
summarise(sum.skin = sum(as.numeric(Skin)))
View(all.state)
runApp('Desktop/Kate')
shiny::runApp('Desktop/Kate')
source('~/Desktop/Kate/scripts/newChart.r', echo=TRUE)
runApp('Desktop/Kate')
runApp('Desktop/Kate')
source('~/Desktop/Kate/scripts/newChart.r', echo=TRUE)
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
all.state <- select(df3, State, Skin, Eye) %>%
summarise(sum.skin = sum(as.numeric(Skin)), sum.eye = sum(as.numeric(Eye)))
View(all.state)
all.state <- select(df3, State, Skin, Eye) %>%
summarise(sum.skin = sum(as.numeric(Skin)), sum.eye = sum(as.numeric(Eye)), gap = sum.skin-sum.eye)
View(all.state)
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
shiny::runApp('Desktop/Kate')
source('~/Desktop/Kate/scripts/newChart.r', echo=TRUE)
runApp('Desktop/Kate')
shiny::runApp('Desktop/Kate')
address <- read.csv('~/Desktop/kate/data/Survey.csv',stringsAsFactors = FALSE)
procedures <- read.csv('~/Desktop/kate/data/Procedures.csv',stringsAsFactors = FALSE)
df4 = address %>% distinct_(~Hospital.Name,~State)
df5 <- left_join(df4, procedures,by = "Hospital.Name") %>%
filter_(~Gastrointestinal != "Not Available") %>%
filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,State,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
#arrange by state and has all the procedures
df3 <- df5 %>% group_by_(~State) %>%
select(State,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
View(df4)
View(df5)
runApp('Desktop/Kate')
shiny::runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
shiny::runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
shiny::runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
shiny::runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
shiny::runApp('Desktop/Kate')
runApp('Desktop/Kate')
address <- read.csv('~/Desktop/kate/data/Survey.csv',stringsAsFactors = FALSE)
procedures <- read.csv('~/Desktop/kate/data/Procedures.csv',stringsAsFactors = FALSE)
df4 = address %>% distinct_(~Hospital.Name,~State)
df5 <- left_join(df4, procedures,by = "Hospital.Name") %>%
filter_(~Gastrointestinal != "Not Available") %>%
filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,State,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
#arrange by state and has all the procedures
df3 <- df5 %>% group_by_(~State) %>%
select(State,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
View(df3)
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
shiny::runApp('Desktop/Kate')
shiny::runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/INFO/final-project')
runApp('Desktop/INFO/final-project')
install.packages("shinythemes")
runApp('Desktop/INFO/final-project')
install.packages("df2")
setwd("~/Desktop/INFO/final-project")
setwd("/Users/kateyen/Desktop/INFO/final-project")
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("zipcode")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
