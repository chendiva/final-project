),
# Main panel: display plotly map
mainPanel(
plotlyOutput('bubble.state')
)
)
)
)
))
# ui.R
library(shiny)
library(plotly)
library(stringr)
library(dplyr)
shinyUI(navbarPage('Procedures across USA in 2014',
# Create a tab panel for your map
tabPanel('In-depth data analyzation',
titlePanel('analyztion by levels'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput('ycol', 'Type of Surgery',
choices = list("Gastrointestinal surgery" = 'Gastrointestinal', "Eye surgery" = 'Eye',
"Nervous System surgery"= 'Nervous.System', "Musculoskeletal surgery"= 'Musculoskeletal',
"Skin surgery" = 'Skin',"Genitourinary surgery" = 'Genitourinary',
"Cardiovascular surgery" = 'Cardiovascular', "Respiratory surgery" = 'Respiratory',
"Other kind of surgery" = 'Other'
),
selected = "Gastrointestinal"
)
),
# Main panel: display plotly map
mainPanel(
plotlyOutput('bubble.state')
)
)
)
))
if (!require(devtools))
install.packages("devtools")
devtools::install_github("jcheng5/googleCharts")
# ui.R
library(shiny)
library(plotly)
library(stringr)
library(dplyr)
shinyUI(navbarPage('Procedures across USA in 2014',
# Create a tab panel for your map
tabPanel('In-depth data analyzation',
titlePanel('analyztion by levels'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput('ycol', 'Type of Surgery',
choices = list("Gastrointestinal surgery" = 'Gastrointestinal', "Eye surgery" = 'Eye',
"Nervous System surgery"= 'Nervous.System', "Musculoskeletal surgery"= 'Musculoskeletal',
"Skin surgery" = 'Skin',"Genitourinary surgery" = 'Genitourinary',
"Cardiovascular surgery" = 'Cardiovascular', "Respiratory surgery" = 'Respiratory',
"Other kind of surgery" = 'Other'
),
selected = "Gastrointestinal"
)
),
# Main panel: display plotly map
mainPanel(
plotlyOutput('bubble.state')
)
)
)
))
runApp()
#Server.r
#Load the package and library that we need to use
library(dplyr)
library(plotly)
library(shiny)
library(rsconnect)
#Read in data
#Set the data set into the data frame
source('./Scripts/bubbledotchart.r')
df1<- read.csv('./data/Survey.csv',stringsAsFactors = FALSE)
df2 <- read.csv('./data/Procedures.csv',stringsAsFactors = FALSE)
#Start Shiny server
shinyServer(function(input, output) {
# Render a plotly object that returns your map
#Put the variables of the data frame and the two you need for comparison into the function(which you get these from the ui)
output$bubble.state <- renderPlotly({
return(BuildBubble.state(input$ycol))
})
})
runApp()
library(plotly)
library(dplyr)
library(stringr)
library(shiny)
#Build a function that shows the bubble dot plot with bar
BuildBubble.state <- function(yvar){
df2 <- df2 %>% filter_(~Gastrointestinal != "Not Available") %>%filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
df2$sum <- as.numeric(df2$Gastrointestinal) + as.numeric(df2$Eye) + as.numeric(df2$Nervous.System)+ as.numeric(df2$Musculoskeletal) + as.numeric(df2$Genitourinary) + as.numeric(df2$Skin) + as.numeric(df2$Cardiovascular) + as.numeric(df2$Respiratory) +as.numeric(df2$Other)
#get the x and y as string
y.equation <- paste0('~', yvar)
#Create a function for the bubble chat we will display.
#We use evel(parse(text = string variable)) sytax to let the function p to evaluate them as number.
p <- plot_ly(df2, x =  df2$sum,
y = eval(parse(text = y.equation)), type = 'scatter', mode = 'markers', size = df2$sum),
#The color is set by Species
#And the range of the size is choosen because I think it will be the best way to read.
color = df2$Hospital.Name, colors = 'Paired',sizes = c(10, 50),
marker = list(opacity = 0.5, sizemode = 'diameter'),
hoverinfo = 'text',
#In the text part, we need to use the df[, eval(variabe we pass)] to get the column that matches the variable that we passed in the function.
#Paste the related information next to the bubble.
text = ~paste('Hospital:', df2$Hospital.Name, '<br /> Sum of the surgeries',':',df2$sum,'<br />Numbers of ',yvar,' surgery:',df2[,eval(yvar)],
'<br />Percentage:' )) %>%
#Set the title of the graph that will be layout correspond to the variable we are using for comparing the flowers.
layout(title = paste0("Proportion of ",str_to_title(yvar)," surgery in State level"),
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
#Return the plot in the end.
return(p)
}
BuildBubble.state <- function(yvar){
df2 <- df2 %>% filter_(~Gastrointestinal != "Not Available") %>%filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
df2$sum <- as.numeric(df2$Gastrointestinal) + as.numeric(df2$Eye) + as.numeric(df2$Nervous.System)+ as.numeric(df2$Musculoskeletal) + as.numeric(df2$Genitourinary) + as.numeric(df2$Skin) + as.numeric(df2$Cardiovascular) + as.numeric(df2$Respiratory) +as.numeric(df2$Other)
#get the x and y as string
y.equation <- paste0('~', yvar)
#Create a function for the bubble chat we will display.
#We use evel(parse(text = string variable)) sytax to let the function p to evaluate them as number.
p <- plot_ly(df2, x =  df2$sum,
y = eval(parse(text = y.equation)), type = 'scatter', mode = 'markers', size = eval(parse(text = y.equation)),
#The color is set by Species
#And the range of the size is choosen because I think it will be the best way to read.
color = df2$Hospital.Name, colors = 'Paired',sizes = c(10, 50),
marker = list(opacity = 0.5, sizemode = 'diameter'),
hoverinfo = 'text',
#In the text part, we need to use the df[, eval(variabe we pass)] to get the column that matches the variable that we passed in the function.
#Paste the related information next to the bubble.
text = ~paste('Hospital:', df2$Hospital.Name, '<br /> Sum of the surgeries',':',df2$sum,'<br />Numbers of ',yvar,' surgery:',df2[,eval(yvar)],
'<br />Percentage:' )) %>%
#Set the title of the graph that will be layout correspond to the variable we are using for comparing the flowers.
layout(title = paste0("Proportion of ",str_to_title(yvar)," surgery in State level"),
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
#Return the plot in the end.
return(p)
}
df2 <- df2 %>% filter_(~Gastrointestinal != "Not Available") %>%filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
df2$sum <- as.numeric(df2$Gastrointestinal) + as.numeric(df2$Eye) + as.numeric(df2$Nervous.System)+ as.numeric(df2$Musculoskeletal) + as.numeric(df2$Genitourinary) + as.numeric(df2$Skin) + as.numeric(df2$Cardiovascular) + as.numeric(df2$Respiratory) +as.numeric(df2$Other)
#get the x and y as string
library(plotly)
library(dplyr)
library(stringr)
library(shiny)
#Build a function that shows the bubble dot plot with bar
BuildBubble.state <- function(yvar){
df2 <- df2 %>% filter_(~Gastrointestinal != "Not Available") %>%filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
df2$sum <- as.numeric(df2$Gastrointestinal) + as.numeric(df2$Eye) + as.numeric(df2$Nervous.System)+ as.numeric(df2$Musculoskeletal) + as.numeric(df2$Genitourinary) + as.numeric(df2$Skin) + as.numeric(df2$Cardiovascular) + as.numeric(df2$Respiratory) +as.numeric(df2$Other)
#get the x and y as string
y.equation <- paste0('~', yvar)
#Create a function for the bubble chat we will display.
#We use evel(parse(text = string variable)) sytax to let the function p to evaluate them as number.
p <- plot_ly(df2, x =  df2$sum,
y = eval(parse(text = y.equation)), type = 'scatter', mode = 'markers', size = df2$sum),
#The color is set by Species
#And the range of the size is choosen because I think it will be the best way to read.
color = df2$Hospital.Name, colors = 'Paired',sizes = c(10, 50),
marker = list(opacity = 0.5, sizemode = 'diameter'),
hoverinfo = 'text',
#In the text part, we need to use the df[, eval(variabe we pass)] to get the column that matches the variable that we passed in the function.
#Paste the related information next to the bubble.
text = ~paste('Hospital:', df2$Hospital.Name, '<br /> Sum of the surgeries',':',df2$sum,'<br />Numbers of ',yvar,' surgery:',df2[,eval(yvar)],
'<br />Percentage:' )) %>%
#Set the title of the graph that will be layout correspond to the variable we are using for comparing the flowers.
layout(title = paste0("Proportion of ",str_to_title(yvar)," surgery in State level"),
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
#Return the plot in the end.
return(p)
}
library(plotly)
library(dplyr)
library(stringr)
library(shiny)
#Build a function that shows the bubble dot plot with bar
BuildBubble.state <- function(yvar){
df2 <- df2 %>% filter_(~Gastrointestinal != "Not Available") %>%filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
df2$sum <- as.numeric(df2$Gastrointestinal) + as.numeric(df2$Eye) + as.numeric(df2$Nervous.System)+ as.numeric(df2$Musculoskeletal) + as.numeric(df2$Genitourinary) + as.numeric(df2$Skin) + as.numeric(df2$Cardiovascular) + as.numeric(df2$Respiratory) +as.numeric(df2$Other)
#get the x and y as string
y.equation <- paste0('~', yvar)
#Create a function for the bubble chat we will display.
#We use evel(parse(text = string variable)) sytax to let the function p to evaluate them as number.
p <- plot_ly(df2, x =  df2$sum,
y = eval(parse(text = y.equation)), type = 'scatter', mode = 'markers', size = df2$sum,
#The color is set by Species
#And the range of the size is choosen because I think it will be the best way to read.
color = df2$Hospital.Name, colors = 'Paired',sizes = c(10, 50),
marker = list(opacity = 0.5, sizemode = 'diameter'),
hoverinfo = 'text',
#In the text part, we need to use the df[, eval(variabe we pass)] to get the column that matches the variable that we passed in the function.
#Paste the related information next to the bubble.
text = ~paste('Hospital:', df2$Hospital.Name, '<br /> Sum of the surgeries',':',df2$sum,'<br />Numbers of ',yvar,' surgery:',df2[,eval(yvar)],
'<br />Percentage:' ))%>%
#Set the title of the graph that will be layout correspond to the variable we are using for comparing the flowers.
layout(title = paste0("Proportion of ",str_to_title(yvar)," surgery in State level"),
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
#Return the plot in the end.
return(p)
}
runApp()
runApp()
library(plotly)
library(dplyr)
library(stringr)
library(shiny)
#Build a function that shows the bubble dot plot with bar
BuildBubble.state <- function(yvar){
df2 <- df2 %>% filter_(~Gastrointestinal != "Not Available") %>%filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
df2$sum <- as.numeric(df2$Gastrointestinal) + as.numeric(df2$Eye) + as.numeric(df2$Nervous.System)+ as.numeric(df2$Musculoskeletal) + as.numeric(df2$Genitourinary) + as.numeric(df2$Skin) + as.numeric(df2$Cardiovascular) + as.numeric(df2$Respiratory) +as.numeric(df2$Other)
#get the x and y as string
y.equation <- paste0('~', yvar)
#Create a function for the bubble chat we will display.
#We use evel(parse(text = string variable)) sytax to let the function p to evaluate them as number.
p <- plot_ly(df2, x =  df2$sum,
y = eval(parse(text = y.equation)), type = 'scatter', mode = 'markers', size = df2$sum,
#The color is set by Species
#And the range of the size is choosen because I think it will be the best way to read.
color = df2$Hospital.Name, colors = 'Paired',sizes = c(10, 50),
marker = list(opacity = 0.5, sizemode = 'diameter'),
hoverinfo = 'text',
#In the text part, we need to use the df[, eval(variabe we pass)] to get the column that matches the variable that we passed in the function.
#Paste the related information next to the bubble.
text = ~paste('Hospital:', df2$Hospital.Name, '<br /> Sum of the surgeries',':',df2$sum,'<br />Numbers of ',yvar,' surgery:',df2[,eval(yvar)],
'<br />Percentage:',round(df2[,eval(yvar)]/df2$sum),'%' ))%>%
#Set the title of the graph that will be layout correspond to the variable we are using for comparing the flowers.
layout(title = paste0("Proportion of ",str_to_title(yvar)," surgery in State level"),
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
#Return the plot in the end.
return(p)
}
runApp()
library(plotly)
library(dplyr)
library(stringr)
library(shiny)
#Build a function that shows the bubble dot plot with bar
BuildBubble.state <- function(yvar){
df2 <- df2 %>% filter_(~Gastrointestinal != "Not Available") %>%filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
df2$sum <- as.numeric(df2$Gastrointestinal) + as.numeric(df2$Eye) + as.numeric(df2$Nervous.System)+ as.numeric(df2$Musculoskeletal) + as.numeric(df2$Genitourinary) + as.numeric(df2$Skin) + as.numeric(df2$Cardiovascular) + as.numeric(df2$Respiratory) +as.numeric(df2$Other)
#get the x and y as string
y.equation <- paste0('~', yvar)
#Create a function for the bubble chat we will display.
#We use evel(parse(text = string variable)) sytax to let the function p to evaluate them as number.
p <- plot_ly(df2, x =  df2$sum,
y = eval(parse(text = y.equation)), type = 'scatter', mode = 'markers', size = df2$sum,
#The color is set by Species
#And the range of the size is choosen because I think it will be the best way to read.
color = df2$Hospital.Name, colors = 'Paired',sizes = c(10, 50),
marker = list(opacity = 0.5, sizemode = 'diameter'),
hoverinfo = 'text',
#In the text part, we need to use the df[, eval(variabe we pass)] to get the column that matches the variable that we passed in the function.
#Paste the related information next to the bubble.
text = ~paste('Hospital:', df2$Hospital.Name, '<br /> Sum of the surgeries',':',df2$sum,'<br />Numbers of ',yvar,' surgery:',df2[,eval(yvar)],
'<br />Percentage:',round(as.numeric(df2[,eval(yvar)])/df2$sum),'%' ))%>%
#Set the title of the graph that will be layout correspond to the variable we are using for comparing the flowers.
layout(title = paste0("Proportion of ",str_to_title(yvar)," surgery in State level"),
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
#Return the plot in the end.
return(p)
}
runApp()
library(plotly)
library(dplyr)
library(stringr)
library(shiny)
#Build a function that shows the bubble dot plot with bar
BuildBubble.state <- function(yvar){
df2 <- df2 %>% filter_(~Gastrointestinal != "Not Available") %>%filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
df2$sum <- as.numeric(df2$Gastrointestinal) + as.numeric(df2$Eye) + as.numeric(df2$Nervous.System)+ as.numeric(df2$Musculoskeletal) + as.numeric(df2$Genitourinary) + as.numeric(df2$Skin) + as.numeric(df2$Cardiovascular) + as.numeric(df2$Respiratory) +as.numeric(df2$Other)
#get the x and y as string
y.equation <- paste0('~', yvar)
#Create a function for the bubble chat we will display.
#We use evel(parse(text = string variable)) sytax to let the function p to evaluate them as number.
p <- plot_ly(df2, x =  df2$sum,
y = eval(parse(text = y.equation)), type = 'scatter', mode = 'markers', size = df2$sum,
#The color is set by Species
#And the range of the size is choosen because I think it will be the best way to read.
color = df2$Hospital.Name, colors = 'Paired',sizes = c(10, 50),
marker = list(opacity = 0.5, sizemode = 'diameter'),
hoverinfo = 'text',
#In the text part, we need to use the df[, eval(variabe we pass)] to get the column that matches the variable that we passed in the function.
#Paste the related information next to the bubble.
text = ~paste('Hospital:', df2$Hospital.Name, '<br /> Sum of the surgeries',':',df2$sum,'<br />Numbers of ',yvar,' surgery:',df2[,eval(yvar)],
'<br />Percentage:',round(as.numeric(df2[,eval(yvar)])*100/df2$sum,digit = 2),'%' ))%>%
#Set the title of the graph that will be layout correspond to the variable we are using for comparing the flowers.
layout(title = paste0("Proportion of ",str_to_title(yvar)," surgery in State level"),
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
#Return the plot in the end.
return(p)
}
runApp()
library(plotly)
library(dplyr)
library(stringr)
library(shiny)
#Build a function that shows the bubble dot plot with bar
BuildBubble.state <- function(yvar){
df2 <- df2 %>% filter_(~Gastrointestinal != "Not Available") %>%filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
df2$sum <- as.numeric(df2$Gastrointestinal) + as.numeric(df2$Eye) + as.numeric(df2$Nervous.System)+ as.numeric(df2$Musculoskeletal) + as.numeric(df2$Genitourinary) + as.numeric(df2$Skin) + as.numeric(df2$Cardiovascular) + as.numeric(df2$Respiratory) +as.numeric(df2$Other)
#get the x and y as string
y.equation <- paste0('~', yvar)
#Create a function for the bubble chat we will display.
#We use evel(parse(text = string variable)) sytax to let the function p to evaluate them as number.
p <- plot_ly(df2, x =  df2$sum,
y = eval(parse(text = y.equation)), type = 'scatter', mode = 'markers', size = df2$sum,
#The color is set by Species
#And the range of the size is choosen because I think it will be the best way to read.
color = df2$Hospital.Name, colors = 'Paired',sizes = c(10, 50),
marker = list(opacity = 0.5, sizemode = 'diameter'),
hoverinfo = 'text',
#In the text part, we need to use the df[, eval(variabe we pass)] to get the column that matches the variable that we passed in the function.
#Paste the related information next to the bubble.
text = ~paste('Hospital:', df2$Hospital.Name, '<br /> Sum of the surgeries',':',df2$sum,'<br />Numbers of ',yvar,' surgery:',df2[,eval(yvar)],
'<br />Percentage:',round(as.numeric(df2[,eval(yvar)])*100/df2$sum,digit = 2),'%' ))%>%
#Set the title of the graph that will be layout correspond to the variable we are using for comparing the flowers.
layout(title = paste0("Proportion of ",str_to_title(yvar)," surgery in various hospital"),
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
#Return the plot in the end.
return(p)
}
d3 <- d2 %>% select(Hospital.Name,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
df3 <- df2 %>% select(Hospital.Name,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
View(df3)
library(plotly)
library(stringr)
library(dplyr)
shinyUI(navbarPage('Procedures across USA in 2014',
# Create a tab panel for your map
tabPanel('In-depth data analyzation',
titlePanel('analyztion by levels'),DT::dataTableOutput('table1'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput('ycol', 'Type of Surgery',
choices = list("Gastrointestinal surgery" = 'Gastrointestinal', "Eye surgery" = 'Eye',
"Nervous System surgery"= 'Nervous.System', "Musculoskeletal surgery"= 'Musculoskeletal',
"Skin surgery" = 'Skin',"Genitourinary surgery" = 'Genitourinary',
"Cardiovascular surgery" = 'Cardiovascular', "Respiratory surgery" = 'Respiratory',
"Other kind of surgery" = 'Other'
),
selected = "Gastrointestinal"
)
),
# Main panel: display plotly map
mainPanel(
plotlyOutput('bubble.state')
)
)
)
))
if (!require("DT")) install.packages('DT')
library(DT)
# ui.R
library(shiny)
library(plotly)
library(stringr)
library(dplyr)
library(DT)
shinyUI(navbarPage('Procedures across USA in 2014',
# Create a tab panel for your map
tabPanel('In-depth data analyzation',
titlePanel('analyztion by levels'),DT::dataTableOutput('table1'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput('ycol', 'Type of Surgery',
choices = list("Gastrointestinal surgery" = 'Gastrointestinal', "Eye surgery" = 'Eye',
"Nervous System surgery"= 'Nervous.System', "Musculoskeletal surgery"= 'Musculoskeletal',
"Skin surgery" = 'Skin',"Genitourinary surgery" = 'Genitourinary',
"Cardiovascular surgery" = 'Cardiovascular', "Respiratory surgery" = 'Respiratory',
"Other kind of surgery" = 'Other'
),
selected = "Gastrointestinal"
)
),
# Main panel: display plotly map
mainPanel(
plotlyOutput('bubble.state')
)
)
)
))
runApp()
runApp()
# ui.R
library(shiny)
library(plotly)
library(stringr)
library(dplyr)
library(DT)
shinyUI(navbarPage('Procedures across USA in 2014',
# Create a tab panel for your map
tabPanel('In-depth data analyzation',
titlePanel('analyztion by levels'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput('ycol', 'Type of Surgery',
choices = list("Gastrointestinal surgery" = 'Gastrointestinal', "Eye surgery" = 'Eye',
"Nervous System surgery"= 'Nervous.System', "Musculoskeletal surgery"= 'Musculoskeletal',
"Skin surgery" = 'Skin',"Genitourinary surgery" = 'Genitourinary',
"Cardiovascular surgery" = 'Cardiovascular', "Respiratory surgery" = 'Respiratory',
"Other kind of surgery" = 'Other'
),
selected = "Gastrointestinal"
)
),
# Main panel: display plotly map
mainPanel(
plotlyOutput('bubble.state')
),
DT::dataTableOutput('table1')
)
)
))
# ui.R
library(shiny)
library(plotly)
library(stringr)
library(dplyr)
library(DT)
shinyUI(navbarPage('Procedures across USA in 2014',
# Create a tab panel for your map
tabPanel('In-depth data analyzation',
titlePanel('analyztion by levels'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput('ycol', 'Type of Surgery',
choices = list("Gastrointestinal surgery" = 'Gastrointestinal', "Eye surgery" = 'Eye',
"Nervous System surgery"= 'Nervous.System', "Musculoskeletal surgery"= 'Musculoskeletal',
"Skin surgery" = 'Skin',"Genitourinary surgery" = 'Genitourinary',
"Cardiovascular surgery" = 'Cardiovascular', "Respiratory surgery" = 'Respiratory',
"Other kind of surgery" = 'Other'
),
selected = "Gastrointestinal"
)
),
# Main panel: display plotly map
mainPanel(
plotlyOutput('bubble.state'),DT::dataTableOutput('table1')
)
)
)
))
runApp()
df4<- df2 %>% distinct_(~Hospital.Name)
View(df4)
df4<- df2 %>% group_by_(~Hospital.Name) %>% distinct_(~Hospital.Name)
df4<- df2 %>% group_by_(~Hospital.Name)
View(df4)
df4<- df1 %>% group_by_(~Hospital.Name)
View(df4)
df4<- df1 %>% group_by_(~Hospital.Name) %>% distinct_(~Hospital.Name)
distinct_df1 = df1 %>% distinct_(~Hospital.Name)
View(distinct_df1)
distinct_df1 = df1 %>% distinct_(~Hospital.Name,~State)
df4 = df1 %>% distinct_(~Hospital.Name,~State)
df5 <- left_join(df4,df1,by = "Hospital.Name")
View(df5)
View(df2)
df5 <- left_join(df4,df2,by = "Hospital.Name")
View(df5)
df5 <- left_join(df4,df2,by = "Hospital.Name", na.rm = TRUE)
View(df5)
df5 <- left_join(df4,df2,by = "Hospital.Name") %>% filter(df5$Gastrointestinal != na.rm)
df5 <- left_join(df4,df2,by = "Hospital.Name") %>% filter(df5$Gastrointestinal != NA)
df5 <- left_join(df4,df2,by = "Hospital.Name") %>% filter(df5$Gastrointestinal != is.na(df5$Gastrointestinal))
df5 <- left_join(df4,df2,by = "Hospital.Name")
