summarise(sum.skin = sum(as.numeric(Skin)))
state.2 <- filter(df3, State == 'AZ') %>%
select(State, Skin) %>%
summarise(sum.skin = sum(as.numberic(Skin)))
state.1 <- filter(df3, State == 'AL') %>%
select(State, Skin) %>%
summarise(sum.skin = sum(as.numeric(Skin)))
state.2 <- filter(df3, State == 'AZ') %>%
select(State, Skin) %>%
summarise(sum.skin = sum(as.numeric(Skin)))
select.state <- filter(df3, State %in% c('AL','AZ')) %>%
select(State, Skin) %>%
summarise(sum.skin = sum(as.numberic(Skin)))
select.state <- filter(df3, State %in% c('AL','AZ')) %>%
select(State, Skin) %>%
summarise(sum.skin = sum(as.numeric(Skin)))
View(select.state)
source('~/.active-rstudio-document', echo=TRUE)
runApp('Desktop/Kate')
library(plotly)
packageVersion(('plotly'))
address <- read.csv('~/Desktop/kate/data/Survey.csv',stringsAsFactors = FALSE)
procedures <- read.csv('~/Desktop/kate/data/Procedures.csv',stringsAsFactors = FALSE)
df4 = address %>% distinct_(~Hospital.Name,~State)
df5 <- left_join(df4, procedures,by = "Hospital.Name") %>%
filter_(~Gastrointestinal != "Not Available") %>%
filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,State,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
#arrange by state and has all the procedures
df3 <- df5 %>% group_by_(~State) %>%
select(State,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
#procedures$Hospital.Name <- factor(procedures$Hospital.Name, levels = procedures$Hospital.Name[order(procedures$Skin)])
state.1 <- filter(df3, State == 'AL') %>%
select(State, Skin) %>%
summarise(sum.skin = sum(as.numeric(Skin)))
state.2 <- filter(df3, State == 'AZ') %>%
select(State, Skin) %>%
summarise(sum.skin = sum(as.numeric(Skin)))
select.state <- filter(df3, State %in% c('AL','AZ')) %>%
select(State, Skin) %>%
summarise(sum.skin = sum(as.numeric(Skin)))
dumbell <- function(this.data) {
#  newChart <- df3 %>% group_by(State) %>%
#    summarise(Gastrointestinal = sum(Gastrointestinal))
plot_ly(select.state, color = I("gray80")) %>%
add_segments(x = ~Skin, xend = ~Skin, y = ~State, yend = ~State, showlegend = FALSE) %>%
#add_markers(x = ~Skin, y = ~State, name = "Skin", color = I("pink")) %>%
#add_markers(x = ~Other, y = ~State, name = "Other", color = I("blue")) %>%
layout(
title = "Gender earnings disparity",
xaxis = list(title = "Annual Salary (in thousands)"),
margin = list(l = 65)
)
}
shiny::runApp('Desktop/Kate')
runApp('Desktop/Kate')
all.state <- select(df3, State, Skin) %>%
summarise(sum.skin = sum(as.numeric(Skin)))
View(all.state)
runApp('Desktop/Kate')
all.state <- select(df3, State, Skin) %>%
summarise(sum.skin = sum(as.numeric(Skin)))
View(all.state)
runApp('Desktop/Kate')
shiny::runApp('Desktop/Kate')
source('~/Desktop/Kate/scripts/newChart.r', echo=TRUE)
runApp('Desktop/Kate')
runApp('Desktop/Kate')
source('~/Desktop/Kate/scripts/newChart.r', echo=TRUE)
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
all.state <- select(df3, State, Skin, Eye) %>%
summarise(sum.skin = sum(as.numeric(Skin)), sum.eye = sum(as.numeric(Eye)))
View(all.state)
all.state <- select(df3, State, Skin, Eye) %>%
summarise(sum.skin = sum(as.numeric(Skin)), sum.eye = sum(as.numeric(Eye)), gap = sum.skin-sum.eye)
View(all.state)
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
shiny::runApp('Desktop/Kate')
source('~/Desktop/Kate/scripts/newChart.r', echo=TRUE)
runApp('Desktop/Kate')
shiny::runApp('Desktop/Kate')
address <- read.csv('~/Desktop/kate/data/Survey.csv',stringsAsFactors = FALSE)
procedures <- read.csv('~/Desktop/kate/data/Procedures.csv',stringsAsFactors = FALSE)
df4 = address %>% distinct_(~Hospital.Name,~State)
df5 <- left_join(df4, procedures,by = "Hospital.Name") %>%
filter_(~Gastrointestinal != "Not Available") %>%
filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,State,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
#arrange by state and has all the procedures
df3 <- df5 %>% group_by_(~State) %>%
select(State,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
View(df4)
View(df5)
runApp('Desktop/Kate')
shiny::runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
shiny::runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
shiny::runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
shiny::runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
shiny::runApp('Desktop/Kate')
runApp('Desktop/Kate')
address <- read.csv('~/Desktop/kate/data/Survey.csv',stringsAsFactors = FALSE)
procedures <- read.csv('~/Desktop/kate/data/Procedures.csv',stringsAsFactors = FALSE)
df4 = address %>% distinct_(~Hospital.Name,~State)
df5 <- left_join(df4, procedures,by = "Hospital.Name") %>%
filter_(~Gastrointestinal != "Not Available") %>%
filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,State,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
#arrange by state and has all the procedures
df3 <- df5 %>% group_by_(~State) %>%
select(State,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
View(df3)
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
shiny::runApp('Desktop/Kate')
shiny::runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/Kate')
runApp('Desktop/INFO/final-project')
runApp('Desktop/INFO/final-project')
install.packages("shinythemes")
runApp('Desktop/INFO/final-project')
install.packages("df2")
setwd("~/Desktop/INFO/final-project")
setwd("/Users/kateyen/Desktop/INFO/final-project")
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("zipcode")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(shinythemes)
library(shiny)
library(plotly)
library(stringr)
library(dplyr)
library(DT)
runApp()
library (plotly)
library (dplyr)
# Sets up the DataFrame map.data to work with.
drawMap <- function(map.data, procedure, max.value) {
map.data.place <- select(map.data, Hospital.Name, City, State)
map.data.procedure <- select_(map.data, "Hospital.Name", procedure)
map.data.procedure <- unique(map.data.procedure[1:2])
names(map.data.procedure)[2]<-paste("Variable")
map.data <- left_join(map.data.place, map.data.procedure, by ="Hospital.Name")
map.data <- unique(map.data[1:5])
map.data <- na.omit(map.data)
map.data <- map.data[!grepl("Not Available", map.data$Variable),]
names(zipcode)[1]<-paste("ZIP.Code")
zipcode$ZIP.Code <- as.numeric(zipcode$ZIP.Code)
map.data <- left_join(map.data, zipcode, by="ZIP.Code")
map.data$Variable <- as.numeric(map.data$Variable)
map.data.summary <- group_by(map.data, State) %>%
summarise(procedure = sum(Variable)) %>%
filter(procedure < max.value)
info <- paste0(map.data$State, '<br>', map.data$Variable)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(map.data.summary, locationmode = 'USA-states') %>%
add_trace(
z = ~procedure, locations = ~State,
color = ~procedure, colors = c("yellow","red"), hoverinfo = ~info, colors = 'Purples'
) %>%
colorbar(title = "Number of Procedures") %>%
layout(
title = paste0('Number of ', procedure, ' procedures by State*<br>(Hover for breakdown)'),
geo = g
)
return(p)
}
drawMap("Eye")
runApp()
map.data <- as.data.frame(read.csv('~/Desktop/Info/final-project/data/Procedures.csv', stringsAsFactors = FALSE))
map.data <- left_join(map.data, as.data.frame(read.csv('~/Desktop/Info/final-project/data/Survey.csv', stringsAsFactors = FALSE)))
runApp()
library (plotly)
library (dplyr)
runApp()
View(zipcode)
library(zipcode)
View(zipcode)
install.packages("zipcode")
zipcode
install.packages("zipcode")
zip.code
zipcodes
zip.codes
data(zipcode)
View(zipcode)
View("zipcode")
map.data.place <- select(map.data, Hospital.Name, City, State, ZIP.Code)
map.data.place <- select(map.data, Hospital.Name, City, State, ZIP.Code)
library (plotly)
library (dplyr)
map.data.place <- select(map.data, Hospital.Name, City, State, ZIP.Code)
map.data.procedure <- select_(map.data, "Hospital.Name", procedure)
#Server.r
#Load the package and library that we need to use
library(dplyr)
library(plotly)
library(shiny)
library(rsconnect)
library(DT)
library(reshape2)
#Read in data
#Set the data set into the data frame
source('Scripts/bubbledotchart.r')
source('Scripts/barchart.r')
source('Scripts/piecharthospital.r')
source('Scripts/usmap.r')
source('./scripts/dumbbell.r')
map.data <- as.data.frame(read.csv('~/Desktop/Info/final-project/data/Procedures.csv', stringsAsFactors = FALSE))
map.data <- left_join(map.data, as.data.frame(read.csv('~/Desktop/Info/final-project/data/Survey.csv', stringsAsFactors = FALSE)))
shinyServer(function(input, output) {
# Render a plotly object that returns your map, charts and the table
#Put the variables of the data frame that you need for comparison into the function(which you get these from the ui)
output$bar.state <-renderPlotly({
return(BuildBar.state(input$ycol2))
})
output$bubble <- renderPlotly({
return(BuildBubble(input$ycol))
})
#I set the row initially displayed is ten, and then you can click the column to sort.
output$table1 <- DT::renderDataTable(
DT::datatable(df5, options = list(pageLength = 10,orderClasses = TRUE))
)
output$pie.hospital<-renderPlotly({
return(BuildPie.hospital(input$ycol3))
})
output$map<-renderPlotly({
return(drawMap(map.data, input$map.variable, input$display))
})
output$scatter <- renderPlotly({
return(compare.surgeries(input$select, input$select1))
})
})
library (plotly)
library (dplyr)
library(zipcode)
# Sets up the DataFrame map.data to work with.
drawMap <- function(map.data, procedure, max.value) {
map.data.place <- select(map.data, Hospital.Name, City, State, ZIP.Code)
map.data.procedure <- select_(map.data, "Hospital.Name", procedure)
map.data.procedure <- unique(map.data.procedure[1:2])
names(map.data.procedure)[2]<-paste("Variable")
map.data <- left_join(map.data.place, map.data.procedure, by ="Hospital.Name")
map.data <- unique(map.data[1:5])
map.data <- na.omit(map.data)
map.data <- map.data[!grepl("Not Available", map.data$Variable),]
names(zipcode)[1]<-paste("ZIP.Code")
zipcode$ZIP.Code <- as.numeric(zipcode$ZIP.Code)
map.data <- left_join(map.data, zipcode, by="ZIP.Code")
map.data$Variable <- as.numeric(map.data$Variable)
map.data.summary <- group_by(map.data, State) %>%
summarise(procedure = sum(Variable)) %>%
filter(procedure < max.value)
info <- paste0(map.data$State, '<br>', map.data$Variable)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(map.data.summary, locationmode = 'USA-states') %>%
add_trace(
z = ~procedure, locations = ~State,
color = ~procedure, colors = c("yellow","red"), hoverinfo = ~info, colors = 'Purples'
) %>%
colorbar(title = "Number of Procedures") %>%
layout(
title = paste0('Number of ', procedure, ' procedures by State*<br>(Hover for breakdown)'),
geo = g
)
return(p)
}
map.data.procedure <- select_(map.data, "Hospital.Name", procedure)
max.value <- 1
procedure <- "Eye"
drawMap <- function(map.data, procedure, max.value) {
map.data.place <- select(map.data, Hospital.Name, City, State, ZIP.Code)
map.data.procedure <- select_(map.data, "Hospital.Name", procedure)
map.data.procedure <- unique(map.data.procedure[1:2])
names(map.data.procedure)[2]<-paste("Variable")
map.data <- left_join(map.data.place, map.data.procedure, by ="Hospital.Name")
map.data <- unique(map.data[1:5])
map.data <- na.omit(map.data)
map.data <- map.data[!grepl("Not Available", map.data$Variable),]
names(zipcode)[1]<-paste("ZIP.Code")
zipcode$ZIP.Code <- as.numeric(zipcode$ZIP.Code)
map.data <- left_join(map.data, zipcode, by="ZIP.Code")
map.data$Variable <- as.numeric(map.data$Variable)
map.data.summary <- group_by(map.data, State) %>%
summarise(procedure = sum(Variable)) %>%
filter(procedure < max.value)
info <- paste0(map.data$State, '<br>', map.data$Variable)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(map.data.summary, locationmode = 'USA-states') %>%
add_trace(
z = ~procedure, locations = ~State,
color = ~procedure, colors = c("yellow","red"), hoverinfo = ~info, colors = 'Purples'
) %>%
colorbar(title = "Number of Procedures") %>%
layout(
title = paste0('Number of ', procedure, ' procedures by State*<br>(Hover for breakdown)'),
geo = g
)
return(p)
}
drawMap(map.data, "Eye", 1)
data("zipcode")
View(zipcode)
library (plotly)
library (dplyr)
library(zipcode)
# Sets up the DataFrame map.data to work with.
max.value <- 1
procedure <- "Eye"
drawMap <- function(map.data, procedure, max.value) {
map.data.place <- select(map.data, Hospital.Name, City, State, ZIP.Code)
map.data.procedure <- select_(map.data, "Hospital.Name", procedure)
map.data.procedure <- unique(map.data.procedure[1:2])
names(map.data.procedure)[2]<-paste("Variable")
map.data <- left_join(map.data.place, map.data.procedure, by ="Hospital.Name")
map.data <- unique(map.data[1:5])
map.data <- na.omit(map.data)
map.data <- map.data[!grepl("Not Available", map.data$Variable),]
names(zipcode)[1]<-paste("ZIP.Code")
zipcode$ZIP.Code <- as.numeric(zipcode$ZIP.Code)
map.data <- left_join(map.data, zipcode, by="ZIP.Code")
map.data$Variable <- as.numeric(map.data$Variable)
map.data.summary <- group_by(map.data, State) %>%
summarise(procedure = sum(Variable)) %>%
filter(procedure < max.value)
info <- paste0(map.data$State, '<br>', map.data$Variable)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(map.data.summary, locationmode = 'USA-states') %>%
add_trace(
z = ~procedure, locations = ~State,
color = ~procedure, colors = c("yellow","red"), hoverinfo = ~info, colors = 'Purples'
) %>%
colorbar(title = "Number of Procedures") %>%
layout(
title = paste0('Number of ', procedure, ' procedures by State*<br>(Hover for breakdown)'),
geo = g
)
return(p)
}
drawMap(map.data, "Eye", 1)
map.data.place <- select(map.data, Hospital.Name, City, State, ZIP.Code)
map.data.procedure <- select_(map.data, "Hospital.Name", procedure)
map.data.procedure <- unique(map.data.procedure[1:2])
names(map.data.procedure)[2]<-paste("Variable")
map.data <- left_join(map.data.place, map.data.procedure, by ="Hospital.Name")
map.data <- unique(map.data[1:5])
map.data <- na.omit(map.data)
map.data <- map.data[!grepl("Not Available", map.data$Variable),]
names(zipcode)[1]<-paste("ZIP.Code")
zipcode$ZIP.Code <- as.numeric(zipcode$ZIP.Code)
map.data <- left_join(map.data, zipcode, by="ZIP.Code")
map.data$Variable <- as.numeric(map.data$Variable)
map.data.summary <- group_by(map.data, State) %>%
summarise(procedure = sum(Variable)) %>%
filter(procedure < max.value)
info <- paste0(map.data$State, '<br>', map.data$Variable)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(map.data.summary, locationmode = 'USA-states') %>%
add_trace(
z = ~procedure, locations = ~State,
color = ~procedure, colors = c("yellow","red"), hoverinfo = ~info, colors = 'Purples'
) %>%
colorbar(title = "Number of Procedures") %>%
layout(
title = paste0('Number of ', procedure, ' procedures by State*<br>(Hover for breakdown)'),
geo = g
)
return(p)
p <- plot_geo(map.data.summary, locationmode = 'USA-states') %>%
add_trace(
z = ~procedure, locations = ~State,
color = ~procedure, colors = c("yellow","red"), hoverinfo = ~info, colors = 'Purples'
) %>%
colorbar(title = "Number of Procedures") %>%
layout(
title = paste0('Number of ', procedure, ' procedures by State*<br>(Hover for breakdown)'),
geo = g
)
library (plotly)
library (dplyr)
library(zipcode)
# Sets up the DataFrame map.data to work with.
max.value <- 1
procedure <- "Eye"
drawMap <- function(map.data, procedure, max.value) {
map.data.place <- select(map.data, Hospital.Name, City, State, ZIP.Code)
map.data.procedure <- select_(map.data, "Hospital.Name", procedure)
map.data.procedure <- unique(map.data.procedure[1:2])
names(map.data.procedure)[2]<-paste("Variable")
map.data <- left_join(map.data.place, map.data.procedure, by ="Hospital.Name")
map.data <- unique(map.data[1:5])
map.data <- na.omit(map.data)
map.data <- map.data[!grepl("Not Available", map.data$Variable),]
names(zipcode)[1]<-paste("ZIP.Code")
zipcode$ZIP.Code <- as.numeric(zipcode$ZIP.Code)
map.data <- left_join(map.data, zipcode, by="ZIP.Code")
map.data$Variable <- as.numeric(map.data$Variable)
map.data.summary <- group_by(map.data, State) %>%
summarise(procedure = sum(Variable)) %>%
filter(procedure < max.value)
info <- paste0(map.data$State, '<br>', map.data$Variable)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(map.data.summary, locationmode = 'USA-states') %>%
add_trace(
z = ~procedure, locations = ~State,
color = ~procedure, colors = c("yellow","red"), hoverinfo = ~info, colors = 'Purples'
) %>%
layout(
title = paste0('Number of ', procedure, ' procedures by State*<br>(Hover for breakdown)'),
geo = g
)
return(p)
}
drawMap(map.data, "Eye", 1)
runApp()
library(zipcode)
data("zipcode")
