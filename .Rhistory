g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(map.data.summary, locationmode = 'USA-states') %>%
add_trace(
z = ~procedure, locations = ~State,
color = ~procedure, colors = c("yellow","red"), hoverinfo = ~info, colors = 'Purples'
) %>%
colorbar(title = "Number of Procedures") %>%
layout(
title = paste0('Number of ', procedure, ' procedures by State*<br>(Hover for breakdown)'),
geo = g
)
return(p)
}
drawMap("Eye")
runApp()
map.data <- as.data.frame(read.csv('~/Desktop/Info/final-project/data/Procedures.csv', stringsAsFactors = FALSE))
map.data <- left_join(map.data, as.data.frame(read.csv('~/Desktop/Info/final-project/data/Survey.csv', stringsAsFactors = FALSE)))
runApp()
library (plotly)
library (dplyr)
runApp()
View(zipcode)
library(zipcode)
View(zipcode)
install.packages("zipcode")
zipcode
install.packages("zipcode")
zip.code
zipcodes
zip.codes
data(zipcode)
View(zipcode)
View("zipcode")
map.data.place <- select(map.data, Hospital.Name, City, State, ZIP.Code)
map.data.place <- select(map.data, Hospital.Name, City, State, ZIP.Code)
library (plotly)
library (dplyr)
map.data.place <- select(map.data, Hospital.Name, City, State, ZIP.Code)
map.data.procedure <- select_(map.data, "Hospital.Name", procedure)
#Server.r
#Load the package and library that we need to use
library(dplyr)
library(plotly)
library(shiny)
library(rsconnect)
library(DT)
library(reshape2)
#Read in data
#Set the data set into the data frame
source('Scripts/bubbledotchart.r')
source('Scripts/barchart.r')
source('Scripts/piecharthospital.r')
source('Scripts/usmap.r')
source('./scripts/dumbbell.r')
map.data <- as.data.frame(read.csv('~/Desktop/Info/final-project/data/Procedures.csv', stringsAsFactors = FALSE))
map.data <- left_join(map.data, as.data.frame(read.csv('~/Desktop/Info/final-project/data/Survey.csv', stringsAsFactors = FALSE)))
shinyServer(function(input, output) {
# Render a plotly object that returns your map, charts and the table
#Put the variables of the data frame that you need for comparison into the function(which you get these from the ui)
output$bar.state <-renderPlotly({
return(BuildBar.state(input$ycol2))
})
output$bubble <- renderPlotly({
return(BuildBubble(input$ycol))
})
#I set the row initially displayed is ten, and then you can click the column to sort.
output$table1 <- DT::renderDataTable(
DT::datatable(df5, options = list(pageLength = 10,orderClasses = TRUE))
)
output$pie.hospital<-renderPlotly({
return(BuildPie.hospital(input$ycol3))
})
output$map<-renderPlotly({
return(drawMap(map.data, input$map.variable, input$display))
})
output$scatter <- renderPlotly({
return(compare.surgeries(input$select, input$select1))
})
})
library (plotly)
library (dplyr)
library(zipcode)
# Sets up the DataFrame map.data to work with.
drawMap <- function(map.data, procedure, max.value) {
map.data.place <- select(map.data, Hospital.Name, City, State, ZIP.Code)
map.data.procedure <- select_(map.data, "Hospital.Name", procedure)
map.data.procedure <- unique(map.data.procedure[1:2])
names(map.data.procedure)[2]<-paste("Variable")
map.data <- left_join(map.data.place, map.data.procedure, by ="Hospital.Name")
map.data <- unique(map.data[1:5])
map.data <- na.omit(map.data)
map.data <- map.data[!grepl("Not Available", map.data$Variable),]
names(zipcode)[1]<-paste("ZIP.Code")
zipcode$ZIP.Code <- as.numeric(zipcode$ZIP.Code)
map.data <- left_join(map.data, zipcode, by="ZIP.Code")
map.data$Variable <- as.numeric(map.data$Variable)
map.data.summary <- group_by(map.data, State) %>%
summarise(procedure = sum(Variable)) %>%
filter(procedure < max.value)
info <- paste0(map.data$State, '<br>', map.data$Variable)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(map.data.summary, locationmode = 'USA-states') %>%
add_trace(
z = ~procedure, locations = ~State,
color = ~procedure, colors = c("yellow","red"), hoverinfo = ~info, colors = 'Purples'
) %>%
colorbar(title = "Number of Procedures") %>%
layout(
title = paste0('Number of ', procedure, ' procedures by State*<br>(Hover for breakdown)'),
geo = g
)
return(p)
}
map.data.procedure <- select_(map.data, "Hospital.Name", procedure)
max.value <- 1
procedure <- "Eye"
drawMap <- function(map.data, procedure, max.value) {
map.data.place <- select(map.data, Hospital.Name, City, State, ZIP.Code)
map.data.procedure <- select_(map.data, "Hospital.Name", procedure)
map.data.procedure <- unique(map.data.procedure[1:2])
names(map.data.procedure)[2]<-paste("Variable")
map.data <- left_join(map.data.place, map.data.procedure, by ="Hospital.Name")
map.data <- unique(map.data[1:5])
map.data <- na.omit(map.data)
map.data <- map.data[!grepl("Not Available", map.data$Variable),]
names(zipcode)[1]<-paste("ZIP.Code")
zipcode$ZIP.Code <- as.numeric(zipcode$ZIP.Code)
map.data <- left_join(map.data, zipcode, by="ZIP.Code")
map.data$Variable <- as.numeric(map.data$Variable)
map.data.summary <- group_by(map.data, State) %>%
summarise(procedure = sum(Variable)) %>%
filter(procedure < max.value)
info <- paste0(map.data$State, '<br>', map.data$Variable)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(map.data.summary, locationmode = 'USA-states') %>%
add_trace(
z = ~procedure, locations = ~State,
color = ~procedure, colors = c("yellow","red"), hoverinfo = ~info, colors = 'Purples'
) %>%
colorbar(title = "Number of Procedures") %>%
layout(
title = paste0('Number of ', procedure, ' procedures by State*<br>(Hover for breakdown)'),
geo = g
)
return(p)
}
drawMap(map.data, "Eye", 1)
data("zipcode")
View(zipcode)
library (plotly)
library (dplyr)
library(zipcode)
# Sets up the DataFrame map.data to work with.
max.value <- 1
procedure <- "Eye"
drawMap <- function(map.data, procedure, max.value) {
map.data.place <- select(map.data, Hospital.Name, City, State, ZIP.Code)
map.data.procedure <- select_(map.data, "Hospital.Name", procedure)
map.data.procedure <- unique(map.data.procedure[1:2])
names(map.data.procedure)[2]<-paste("Variable")
map.data <- left_join(map.data.place, map.data.procedure, by ="Hospital.Name")
map.data <- unique(map.data[1:5])
map.data <- na.omit(map.data)
map.data <- map.data[!grepl("Not Available", map.data$Variable),]
names(zipcode)[1]<-paste("ZIP.Code")
zipcode$ZIP.Code <- as.numeric(zipcode$ZIP.Code)
map.data <- left_join(map.data, zipcode, by="ZIP.Code")
map.data$Variable <- as.numeric(map.data$Variable)
map.data.summary <- group_by(map.data, State) %>%
summarise(procedure = sum(Variable)) %>%
filter(procedure < max.value)
info <- paste0(map.data$State, '<br>', map.data$Variable)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(map.data.summary, locationmode = 'USA-states') %>%
add_trace(
z = ~procedure, locations = ~State,
color = ~procedure, colors = c("yellow","red"), hoverinfo = ~info, colors = 'Purples'
) %>%
colorbar(title = "Number of Procedures") %>%
layout(
title = paste0('Number of ', procedure, ' procedures by State*<br>(Hover for breakdown)'),
geo = g
)
return(p)
}
drawMap(map.data, "Eye", 1)
map.data.place <- select(map.data, Hospital.Name, City, State, ZIP.Code)
map.data.procedure <- select_(map.data, "Hospital.Name", procedure)
map.data.procedure <- unique(map.data.procedure[1:2])
names(map.data.procedure)[2]<-paste("Variable")
map.data <- left_join(map.data.place, map.data.procedure, by ="Hospital.Name")
map.data <- unique(map.data[1:5])
map.data <- na.omit(map.data)
map.data <- map.data[!grepl("Not Available", map.data$Variable),]
names(zipcode)[1]<-paste("ZIP.Code")
zipcode$ZIP.Code <- as.numeric(zipcode$ZIP.Code)
map.data <- left_join(map.data, zipcode, by="ZIP.Code")
map.data$Variable <- as.numeric(map.data$Variable)
map.data.summary <- group_by(map.data, State) %>%
summarise(procedure = sum(Variable)) %>%
filter(procedure < max.value)
info <- paste0(map.data$State, '<br>', map.data$Variable)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(map.data.summary, locationmode = 'USA-states') %>%
add_trace(
z = ~procedure, locations = ~State,
color = ~procedure, colors = c("yellow","red"), hoverinfo = ~info, colors = 'Purples'
) %>%
colorbar(title = "Number of Procedures") %>%
layout(
title = paste0('Number of ', procedure, ' procedures by State*<br>(Hover for breakdown)'),
geo = g
)
return(p)
p <- plot_geo(map.data.summary, locationmode = 'USA-states') %>%
add_trace(
z = ~procedure, locations = ~State,
color = ~procedure, colors = c("yellow","red"), hoverinfo = ~info, colors = 'Purples'
) %>%
colorbar(title = "Number of Procedures") %>%
layout(
title = paste0('Number of ', procedure, ' procedures by State*<br>(Hover for breakdown)'),
geo = g
)
library (plotly)
library (dplyr)
library(zipcode)
# Sets up the DataFrame map.data to work with.
max.value <- 1
procedure <- "Eye"
drawMap <- function(map.data, procedure, max.value) {
map.data.place <- select(map.data, Hospital.Name, City, State, ZIP.Code)
map.data.procedure <- select_(map.data, "Hospital.Name", procedure)
map.data.procedure <- unique(map.data.procedure[1:2])
names(map.data.procedure)[2]<-paste("Variable")
map.data <- left_join(map.data.place, map.data.procedure, by ="Hospital.Name")
map.data <- unique(map.data[1:5])
map.data <- na.omit(map.data)
map.data <- map.data[!grepl("Not Available", map.data$Variable),]
names(zipcode)[1]<-paste("ZIP.Code")
zipcode$ZIP.Code <- as.numeric(zipcode$ZIP.Code)
map.data <- left_join(map.data, zipcode, by="ZIP.Code")
map.data$Variable <- as.numeric(map.data$Variable)
map.data.summary <- group_by(map.data, State) %>%
summarise(procedure = sum(Variable)) %>%
filter(procedure < max.value)
info <- paste0(map.data$State, '<br>', map.data$Variable)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(map.data.summary, locationmode = 'USA-states') %>%
add_trace(
z = ~procedure, locations = ~State,
color = ~procedure, colors = c("yellow","red"), hoverinfo = ~info, colors = 'Purples'
) %>%
layout(
title = paste0('Number of ', procedure, ' procedures by State*<br>(Hover for breakdown)'),
geo = g
)
return(p)
}
drawMap(map.data, "Eye", 1)
runApp()
library(zipcode)
data("zipcode")
install.packages("zipcode")
library(zipcode)
#Server.r
#Load the package and library that we need to use
library(dplyr)
library(plotly)
library(shiny)
library(zipcode)
library(rsconnect)
library(DT)
library(reshape2)
#Read in data
#Set the data set into the data frame
source('./Scripts/bubbledotchart.r')
source('./Scripts/barchart.r')
source('./Scripts/piecharthospital.r')
source('./Scripts/usmap.r')
source('./Scripts/dumbbell.r')
map.data <- as.data.frame(read.csv('./data/Procedures.csv', stringsAsFactors = FALSE))
map.data <- left_join(map.data, as.data.frame(read.csv('./data/Survey.csv', stringsAsFactors = FALSE)))
shinyServer(function(input, output) {
# Render a plotly object that returns your map, charts and the table
#Put the variables of the data frame that you need for comparison into the function(which you get these from the ui)
output$bar.state <-renderPlotly({
return(BuildBar.state(input$ycol2))
})
output$bubble <- renderPlotly({
return(BuildBubble(input$ycol))
})
#I set the row initially displayed is ten, and then you can click the column to sort.
output$table1 <- DT::renderDataTable(
DT::datatable(df5, options = list(pageLength = 10,orderClasses = TRUE))
)
output$pie.hospital<-renderPlotly({
return(BuildPie.hospital(input$ycol3))
})
output$map<-renderPlotly({
return(drawMap(map.data, input$map.variable, input$display))
})
output$scatter <- renderPlotly({
return(compare.surgeries(input$select, input$select1))
})
})
runApp()
library(zipcode)
# ui.R
library(shinythemes)
library(shiny)
library(plotly)
library(stringr)
library(dplyr)
library(DT)
library(zipcode)
#This setting for taglist is used to make the theme of the internet
ui = tagList(
shinythemes::themeSelector(),
navbarPage(
theme = "slate",
'Procedures across USA in 2014',
# Create a tab panel for your charts
tabPanel('State level analyzation',
titlePanel('Analyztion of different kind of procedures in state level'),
# Create sidebar layout for the in-depth analyzation from state level.
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to chats
#In the state level, you choose the surgery you want to compare among all the states that are information available(Some hospital refused to offer their statistics)
selectInput('ycol2', 'Type of Surgery for State level',
choices = list("Gastrointestinal surgery" = 'Gastrointestinal', "Eye surgery" = 'Eye',
"Nervous System surgery"= 'Nervous.System', "Musculoskeletal surgery"= 'Musculoskeletal',
"Skin surgery" = 'Skin',"Genitourinary surgery" = 'Genitourinary',
"Cardiovascular surgery" = 'Cardiovascular', "Respiratory surgery" = 'Respiratory',
"Other kind of surgery" = 'Other'
),
selected = "Gastrointestinal"
)
),
# Main panel: display plotly charts and a table that you can search for a certain hospital's information about surgery.
mainPanel(
plotlyOutput('bar.state')
)
)
),
tabPanel('Hopital level analyzation',
titlePanel('Analyztion of various procedures in the hospital level'),
# Create sidebar layout for the in-depth analyzation from hospital level.
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to chats
#In the hospital level, there are two ways to compare, the bubble chart offers you a way to compare certain surgery among all the hospitals that offered their statistics.
selectInput('ycol', 'Type of Surgery for hospital level',
choices = list("Gastrointestinal surgery" = 'Gastrointestinal', "Eye surgery" = 'Eye',
"Nervous System surgery"= 'Nervous.System', "Musculoskeletal surgery"= 'Musculoskeletal',
"Skin surgery" = 'Skin',"Genitourinary surgery" = 'Genitourinary',
"Cardiovascular surgery" = 'Cardiovascular', "Respiratory surgery" = 'Respiratory',
"Other kind of surgery" = 'Other'
),
selected = "Gastrointestinal"
)
),
# Main panel: display plotly charts and a table that you can search for a certain hospital's information about surgery.
mainPanel(
plotlyOutput('bubble')
)
)
),
tabPanel('Search a hospital',
titlePanel('Search specific hospital data'),
# Create sidebar layout for the hopital that the user want to look at.
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to chats
#The pie chart based on the hospital level offer you a choice of hospital you want to look into, and show the proportion of the procedures that the hospital had conducted.
#A table contains the hospital name, state, and procedures' numbers
selectInput('ycol3', 'Hopital choice',
choices = df2$Hospital.Name ,
selected = "CROSSROADS COMMUNITY HOSPITAL")
),
# Main panel: display plotly charts and a table that you can search for a certain hospital's information about surgery.
mainPanel(
plotlyOutput('pie.hospital'),DT::dataTableOutput('table1')
)
)
),
tabPanel('Procedures by State (Map)',
titlePanel('Map representation of the Number of Procedures by State'),
# Create sidebar layout for the in-depth analyzation by state level.
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to chats
selectInput('map.variable', 'Type of Procedure',
choices = list("Gastrointestinal surgery" = 'Gastrointestinal', "Eye surgery" = 'Eye',
"Nervous System surgery"= 'Nervous.System', "Musculoskeletal surgery"= 'Musculoskeletal',
"Skin surgery" = 'Skin',"Genitourinary surgery" = 'Genitourinary',
"Cardiovascular surgery" = 'Cardiovascular', "Respiratory surgery" = 'Respiratory',
"Other kind of surgery" = 'Other'
),
selected = "Gastrointestinal"
),
sliderInput("display",
"Only display states with # of procedures less than:",
min = 0,  max = 600000,  value = 250000)
),
# Main panel: display plotly charts and a table that you can search for a certain hospital's information about surgery.
mainPanel(
plotlyOutput('map'),
h5("*Data from Tennessee not available for some displays", align = "center")
)
)
)
,
tabPanel("Compare Two Surgeries",
titlePanel('Compare Surgeries By State'),
sidebarLayout(
sidebarPanel(
titlePanel('Please Select Two Surgeries to Compare'),
selectInput('select', label = 'Surgery 1',
choices = list('Gastrointestinal' = 'Gastrointestinal', 'Eye' = 'Eye', 'Nervous System' = 'Nervous.System',
'Musculoskeletal' = 'Musculoskeletal', 'Skin' = 'Skin', 'Genitourinary' = 'Genitourinary',
'Cardiovascular' = 'Cardiovascular', 'Respiratory' = 'Respiratory',
'Other' = 'Other')),
selectInput('select1', label = 'Surgery 2',
choices = list('Gastrointestinal' = 'Gastrointestinal', 'Eye' = 'Eye', 'Nervous System' = 'Nervous.System',
'Musculoskeletal' = 'Musculoskeletal', 'Skin' = 'Skin', 'Genitourinary' = 'Genitourinary',
'Cardiovascular' = 'Cardiovascular', 'Respiratory' = 'Respiratory',
'Other' = 'Other'))
),
mainPanel(
# Plot the output with the name "scatter"
plotlyOutput('scatter'),
p("When a patient is looking into getting two kinds of surgeries, this tool can help the patient get a
general sense of how often the two surgeries occur in each state. The patient would want to do their
surgeries in states with hospitals that have good experience with both types of surgeries")
)
)
))
)
library(dplyr)
library(plotly)
library(shiny)
library(zipcode)
library(DT)
library(reshape2)
compare.surgeries <- function(surgery.one, surgery.two) {
print(paste0(surgery.one,":",surgery.two))
all.state <- select_(df3, quote(State), surgery.one, surgery.two) %>%
summarise_(surgery1.sum = paste0("sum(as.numeric(",surgery.one,"))"),
surgery2.sum = paste0("sum(as.numeric(",surgery.two,"))"),
gap = "surgery1.sum-surgery2.sum")
plot_ly(all.state, color = I("gray80")) %>%
add_segments(x = ~surgery1.sum, xend = ~surgery2.sum, y = ~State, yend = ~State, showlegend = FALSE) %>%
add_markers(x = ~surgery1.sum, y = ~State, name = surgery.one, color = I("pink")) %>%
add_markers(x = ~surgery2.sum, y = ~State, name = surgery.two, color = I("blue")) %>%
layout(
title = "Total Number of Surgeries",
xaxis = list(title = "Number of Surgeries per State"),
margin = list(l = 65)
)
}
runApp()
