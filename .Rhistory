library(DT)
shinyUI(navbarPage('Procedures across USA in 2014',
# Create a tab panel for your map
tabPanel('In-depth data analyzation',
titlePanel('analyztion by levels'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput('ycol2', 'Type of Surgery for State level',
choices = list("Gastrointestinal surgery" = 'Gastrointestinal', "Eye surgery" = 'Eye',
"Nervous System surgery"= 'Nervous.System', "Musculoskeletal surgery"= 'Musculoskeletal',
"Skin surgery" = 'Skin',"Genitourinary surgery" = 'Genitourinary',
"Cardiovascular surgery" = 'Cardiovascular', "Respiratory surgery" = 'Respiratory',
"Other kind of surgery" = 'Other'
),
selected = "Gastrointestinal"
),
selectInput('ycol', 'Type of Surgery for hospital level',
choices = list("Gastrointestinal surgery" = 'Gastrointestinal', "Eye surgery" = 'Eye',
"Nervous System surgery"= 'Nervous.System', "Musculoskeletal surgery"= 'Musculoskeletal',
"Skin surgery" = 'Skin',"Genitourinary surgery" = 'Genitourinary',
"Cardiovascular surgery" = 'Cardiovascular', "Respiratory surgery" = 'Respiratory',
"Other kind of surgery" = 'Other'
),
selected = "Gastrointestinal"
),
selectInput('ycol3', 'Hopital choice',
choices = df2$Hospital.Name ,
selected = "CROSSROADS COMMUNITY HOSPITAL")
),
# Main panel: display plotly map
mainPanel(
plotlyOutput('bar.state'),
plotlyOutput('bubble'),DT::dataTableOutput('table1')
)
)
)
))
# ui.R
library(shiny)
library(plotly)
library(stringr)
library(dplyr)
library(DT)
shinyUI(navbarPage('Procedures across USA in 2014',
# Create a tab panel for your map
tabPanel('In-depth data analyzation',
titlePanel('analyztion by levels'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput('ycol2', 'Type of Surgery for State level',
choices = list("Gastrointestinal surgery" = 'Gastrointestinal', "Eye surgery" = 'Eye',
"Nervous System surgery"= 'Nervous.System', "Musculoskeletal surgery"= 'Musculoskeletal',
"Skin surgery" = 'Skin',"Genitourinary surgery" = 'Genitourinary',
"Cardiovascular surgery" = 'Cardiovascular', "Respiratory surgery" = 'Respiratory',
"Other kind of surgery" = 'Other'
),
selected = "Gastrointestinal"
),
selectInput('ycol', 'Type of Surgery for hospital level',
choices = list("Gastrointestinal surgery" = 'Gastrointestinal', "Eye surgery" = 'Eye',
"Nervous System surgery"= 'Nervous.System', "Musculoskeletal surgery"= 'Musculoskeletal',
"Skin surgery" = 'Skin',"Genitourinary surgery" = 'Genitourinary',
"Cardiovascular surgery" = 'Cardiovascular', "Respiratory surgery" = 'Respiratory',
"Other kind of surgery" = 'Other'
),
selected = "Gastrointestinal"
),
selectInput('ycol3', 'Hopital choice',
choices = df2$Hospital.Name ,
selected = "CROSSROADS COMMUNITY HOSPITAL")
),
# Main panel: display plotly map
mainPanel(
plotlyOutput('bar.state'),
plotlyOutput('bubble'),DT::dataTableOutput('table1')
)
)
)
))
runApp()
#Server.r
#Load the package and library that we need to use
library(dplyr)
library(plotly)
library(shiny)
library(rsconnect)
library(DT)
#Read in data
#Set the data set into the data frame
source('./Scripts/bubbledotchart.r')
source('./Scripts/barchart.r')
source('./Scripts/piecharthospital.r')
df1<- read.csv('./data/Survey.csv',stringsAsFactors = FALSE)
df2 <- read.csv('./data/Procedures.csv',stringsAsFactors = FALSE)
df4 = df1 %>% distinct_(~Hospital.Name,~State)
df5 <- left_join(df4,df2,by = "Hospital.Name") %>% filter_(~Gastrointestinal != "Not Available") %>%filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,State,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
df3 <- df5 %>% group_by_(~State) %>% select(State,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
shinyServer(function(input, output) {
# Render a plotly object that returns your map
#Put the variables of the data frame and the two you need for comparison into the function(which you get these from the ui)
output$bar.state <-renderPlotly({
return(BuildBar.state(input$ycol2))
})
output$bubble <- renderPlotly({
return(BuildBubble(input$ycol))
})
output$table1 <- DT::renderDataTable(
DT::datatable(df5, options = list(pageLength = 20))
)
output$pie.hospital<-renderPlotly({
return(BuildPie.hospital(input$ycol3))
})
})
runApp()
library(plotly)
library(dplyr)
library(shiny)
library(stringr)
BuildPie.hospital<- function(name){
df2 <- read.csv('./data/Procedures.csv',stringsAsFactors = FALSE)
df2 <- df2 %>% filter_(~Gastrointestinal != "Not Available") %>%filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
df2$sum <- as.numeric(df2$Gastrointestinal) + as.numeric(df2$Eye) + as.numeric(df2$Nervous.System)+ as.numeric(df2$Musculoskeletal) + as.numeric(df2$Genitourinary) + as.numeric(df2$Skin) + as.numeric(df2$Cardiovascular) + as.numeric(df2$Respiratory) +as.numeric(df2$Other)
data.needed<- filter_(df2,~Hospital.Name %in% name)
colors <- c(colnames(data.needed))
p <- plot_ly(data.needed, labels = colnames(data.needed), values = c(~Gastrointestinal,~Eye,~Nervous.System,~Musculoskeletal,~Genitourinary,~Skin,~Cardiovascular,Respiratory,~Other),
type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$',c(Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other), ' cases'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = paste('Procedure proportion of',str_to_title(name)),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
return(p)
}
Server.r
#Load the package and library that we need to use
library(dplyr)
library(plotly)
library(shiny)
library(rsconnect)
library(DT)
#Read in data
#Set the data set into the data frame
source('./Scripts/bubbledotchart.r')
source('./Scripts/barchart.r')
source('./Scripts/piecharthospital.r')
df1<- read.csv('./data/Survey.csv',stringsAsFactors = FALSE)
df2 <- read.csv('./data/Procedures.csv',stringsAsFactors = FALSE)
df4 = df1 %>% distinct_(~Hospital.Name,~State)
df5 <- left_join(df4,df2,by = "Hospital.Name") %>% filter_(~Gastrointestinal != "Not Available") %>%filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,State,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
df3 <- df5 %>% group_by_(~State) %>% select(State,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
shinyServer(function(input, output) {
# Render a plotly object that returns your map
#Put the variables of the data frame and the two you need for comparison into the function(which you get these from the ui)
output$bar.state <-renderPlotly({
return(BuildBar.state(input$ycol2))
})
output$bubble <- renderPlotly({
return(BuildBubble(input$ycol))
})
output$table1 <- DT::renderDataTable(
DT::datatable(df5, options = list(pageLength = 20))
)
output$pie.hospital<-renderPlotly({
return(BuildPie.hospital(input$ycol3))
})
})
# ui.R
library(shiny)
library(plotly)
library(stringr)
library(dplyr)
library(DT)
shinyUI(navbarPage('Procedures across USA in 2014',
# Create a tab panel for your map
tabPanel('In-depth data analyzation',
titlePanel('analyztion by levels'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput('ycol2', 'Type of Surgery for State level',
choices = list("Gastrointestinal surgery" = 'Gastrointestinal', "Eye surgery" = 'Eye',
"Nervous System surgery"= 'Nervous.System', "Musculoskeletal surgery"= 'Musculoskeletal',
"Skin surgery" = 'Skin',"Genitourinary surgery" = 'Genitourinary',
"Cardiovascular surgery" = 'Cardiovascular', "Respiratory surgery" = 'Respiratory',
"Other kind of surgery" = 'Other'
),
selected = "Gastrointestinal"
),
selectInput('ycol', 'Type of Surgery for hospital level',
choices = list("Gastrointestinal surgery" = 'Gastrointestinal', "Eye surgery" = 'Eye',
"Nervous System surgery"= 'Nervous.System', "Musculoskeletal surgery"= 'Musculoskeletal',
"Skin surgery" = 'Skin',"Genitourinary surgery" = 'Genitourinary',
"Cardiovascular surgery" = 'Cardiovascular', "Respiratory surgery" = 'Respiratory',
"Other kind of surgery" = 'Other'
),
selected = "Gastrointestinal"
),
selectInput('ycol3', 'Hopital choice',
choices = df2$Hospital.Name ,
selected = "CROSSROADS COMMUNITY HOSPITAL")
),
# Main panel: display plotly map
mainPanel(
plotlyOutput('bar.state'),
plotlyOutput('bubble'),DT::dataTableOutput('table1'),
plotlyOutput('pie.hospital')
)
)
)
))
df2$Hospital.Name
runApp()
library(plotly)
library(dplyr)
library(shiny)
library(stringr)
BuildPie.hospital<- function(name){
df2 <- read.csv('./data/Procedures.csv',stringsAsFactors = FALSE)
df2 <- df2 %>% filter_(~Gastrointestinal != "Not Available") %>%filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
df2$sum <- as.numeric(df2$Gastrointestinal) + as.numeric(df2$Eye) + as.numeric(df2$Nervous.System)+ as.numeric(df2$Musculoskeletal) + as.numeric(df2$Genitourinary) + as.numeric(df2$Skin) + as.numeric(df2$Cardiovascular) + as.numeric(df2$Respiratory) +as.numeric(df2$Other)
data.needed<- filter_(df2,~Hospital.Name %in% name)
colors <- c(colnames(data.needed))
p <- plot_ly(data.needed, labels = colnames(data.needed), values = c(~Gastrointestinal,~Eye,~Nervous.System,~Musculoskeletal,~Genitourinary,~Skin,~Cardiovascular,~Respiratory,~Other),
type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$',c(Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other), ' cases'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = paste('Procedure proportion of',str_to_title(name)),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
return(p)
}
runApp()
runApp()
runApp()
library(plotly)
library(dplyr)
library(shiny)
library(stringr)
BuildPie.hospital<- function(name){
df2 <- read.csv('./data/Procedures.csv',stringsAsFactors = FALSE)
df2 <- df2 %>% filter_(~Gastrointestinal != "Not Available") %>%filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
df2$sum <- as.numeric(df2$Gastrointestinal) + as.numeric(df2$Eye) + as.numeric(df2$Nervous.System)+ as.numeric(df2$Musculoskeletal) + as.numeric(df2$Genitourinary) + as.numeric(df2$Skin) + as.numeric(df2$Cardiovascular) + as.numeric(df2$Respiratory) +as.numeric(df2$Other)
data.needed<- filter_(df2,~Hospital.Name %in% name)
colors <- c(colnames(data.needed))
p <- plot_ly(data.needed, labels = c("Gastrointestinal","Eye","Nervous System","Musculoskeletal","Genitourinary","Skin","Cardiovascular","Respiratory","Other"), values = c(~Gastrointestinal,~Eye,~Nervous.System,~Musculoskeletal,~Genitourinary,~Skin,~Cardiovascular,~Respiratory,~Other),
type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = paste('Procedure proportion of',str_to_title(name)),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
return(p)
}
runApp()
#Load the package we need for this chart.
library(plotly)
library(dplyr)
library(stringr)
library(shiny)
#Build a function that shows the bubble dot plot
BuildBubble <- function(yvar){
#We first need to make arrangement of the data set since some hospital refused to offer the information.
#In order to make some calculation based on the data we have, we need to make sure that all the data are numeric
# So we get rid of the hospitals that refused to offer information about the statistics and used as.numeric syntax to make the information easy to calculate.
df2 <- df2 %>% filter_(~Gastrointestinal != "Not Available") %>%filter_(~Cardiovascular != "Not Available") %>%
select(Hospital.Name,Gastrointestinal,Eye,Nervous.System,Musculoskeletal,Genitourinary,Skin,Cardiovascular,Respiratory,Other)
df2$sum <- as.numeric(df2$Gastrointestinal) + as.numeric(df2$Eye) + as.numeric(df2$Nervous.System)+ as.numeric(df2$Musculoskeletal) + as.numeric(df2$Genitourinary) + as.numeric(df2$Skin) + as.numeric(df2$Cardiovascular) + as.numeric(df2$Respiratory) +as.numeric(df2$Other)
#get the  y variable as string
y.equation <- paste0('~', yvar)
#Create a function for the bubble chat we will display.
#We use evel(parse(text = string variable)) sytax to let the function p to evaluate them as number.
p <- plot_ly(df2, x =  df2$sum,
y = eval(parse(text = y.equation)), type = 'scatter', mode = 'markers', size = df2$sum,
#The color is set by Hospital name.
#And the range of the size is choosen because I think it will be the best way to read.
color = df2$Hospital.Name, colors = 'Paired',sizes = c(10, 50),
marker = list(opacity = 0.5, sizemode = 'diameter'),
hoverinfo = 'text',
#In the text part, we need to use the df[, eval(variabe we pass)] to get the column that matches the variable that we passed in the function.
#Paste the related information next to the bubble.
text = ~paste('Hospital:', df2$Hospital.Name, '<br /> Sum of the surgeries',':',df2$sum,'<br />Numbers of ',yvar,' surgery:',df2[,eval(yvar)],
'<br />Percentage:',round(as.numeric(df2[,eval(yvar)])*100/df2$sum,digit = 2),'%' ))%>%
#Set the title of the graph that will be layout correspond to the variable we are using for comparing the procedures among different hospitals.
layout(title = paste0("Proportion of ",str_to_title(yvar)," surgery in various hospital"),
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
#Return the plot in the end.
return(p)
}
#Load the package we need for this chart
library(plotly)
library(shiny)
library(stringr)
library(dplyr)
#Build a bar chart based on the state level for comparison.
BuildBar.state <- function(yvar){
#We need transfer the value in the data set to the numeric value in order to do the calculation and the arrangement
#Then, we group the data by state and create replace the original data frame based on the state level.
#Create a sum level that has the total of procedures based on the state level.
df3$Eye.s <- as.numeric(df3$Eye)
df3$Nervous.System.s <-as.numeric(df3$Nervous.System)
df3$Musculoskeletal.s <- as.numeric(df3$Musculoskeletal)
df3$Genitourinary.s <-as.numeric(df3$Genitourinary)
df3$Skin.s <-as.numeric(df3$Skin)
df3$Cardiovascular.s <-as.numeric(df3$Cardiovascular)
df3$Respiratory.s <- as.numeric(df3$Respiratory)
df3$Other.s <- as.numeric(df3$Other)
df3$Gastrointestinal.s <-as.numeric(df3$Gastrointestinal)
df3<- df3 %>% group_by_(~State) %>% summarise(Gastrointestinal = sum(Gastrointestinal.s), Eye = sum(Eye.s), Nervous.System = sum(Nervous.System.s),
Musculoskeletal = sum(Musculoskeletal.s),Genitourinary = sum(Genitourinary.s),Skin = sum(Skin.s),
Cardiovascular = sum(Cardiovascular.s), Respiratory = sum(Respiratory.s), Other = sum(Other.s)) %>%
mutate(sum = Gastrointestinal + Eye + Nervous.System +Musculoskeletal + Genitourinary + Skin +Cardiovascular + Respiratory + Other)
#get the  y variable as string
y.equation <- paste0('~', yvar)
#plot the bar chart, and set the size based on the sum of the total number of surgery, and the color based on the states.
p<-plot_ly(df3, x = df3$State, y = eval(parse(text = y.equation)), color = df3$State,
size = df3$sum,
text = ~paste('Percentage:',round(as.numeric(df3[,eval(yvar)])*100/df3$sum,digit = 2),'%'))%>%
layout(title = paste0("Comparison of diffent types of surgery in State level "),
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
return(p)
}
#Load the package we need for this chart
library(plotly)
library(shiny)
library(stringr)
library(dplyr)
#Build a bar chart based on the state level for comparison.
BuildBar.state <- function(yvar){
#We need transfer the value in the data set to the numeric value in order to do the calculation and the arrangement
#Then, we group the data by state and create replace the original data frame based on the state level.
#Create a sum level that has the total of procedures based on the state level.
df3$Eye.s <- as.numeric(df3$Eye)
df3$Nervous.System.s <-as.numeric(df3$Nervous.System)
df3$Musculoskeletal.s <- as.numeric(df3$Musculoskeletal)
df3$Genitourinary.s <-as.numeric(df3$Genitourinary)
df3$Skin.s <-as.numeric(df3$Skin)
df3$Cardiovascular.s <-as.numeric(df3$Cardiovascular)
df3$Respiratory.s <- as.numeric(df3$Respiratory)
df3$Other.s <- as.numeric(df3$Other)
df3$Gastrointestinal.s <-as.numeric(df3$Gastrointestinal)
df3<- df3 %>% group_by_(~State) %>% summarise(Gastrointestinal = sum(Gastrointestinal.s), Eye = sum(Eye.s), Nervous.System = sum(Nervous.System.s),
Musculoskeletal = sum(Musculoskeletal.s),Genitourinary = sum(Genitourinary.s),Skin = sum(Skin.s),
Cardiovascular = sum(Cardiovascular.s), Respiratory = sum(Respiratory.s), Other = sum(Other.s)) %>%
mutate(sum = Gastrointestinal + Eye + Nervous.System +Musculoskeletal + Genitourinary + Skin +Cardiovascular + Respiratory + Other)
#get the  y variable as string
y.equation <- paste0('~', yvar)
#plot the bar chart, and set the size based on the sum of the total number of surgery, and the color based on the states.
p<-plot_ly(df3, x = df3$State, y = eval(parse(text = y.equation)), color = df3$State,
size = df3$sum,
text = ~paste('Percentage:',round(as.numeric(df3[,eval(yvar)])*100/df3$sum,digit = 2),'%'))%>%
layout(title = paste0("Comparison of diffent types of surgery in State level "),
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
return(p)
}
runApp()
#Load the package we need for this chart
library(plotly)
library(shiny)
library(stringr)
library(dplyr)
#Build a bar chart based on the state level for comparison.
BuildBar.state <- function(yvar){
#We need transfer the value in the data set to the numeric value in order to do the calculation and the arrangement
#Then, we group the data by state and create replace the original data frame based on the state level.
#Create a sum level that has the total of procedures based on the state level.
df3$Eye.s <- as.numeric(df3$Eye)
df3$Nervous.System.s <-as.numeric(df3$Nervous.System)
df3$Musculoskeletal.s <- as.numeric(df3$Musculoskeletal)
df3$Genitourinary.s <-as.numeric(df3$Genitourinary)
df3$Skin.s <-as.numeric(df3$Skin)
df3$Cardiovascular.s <-as.numeric(df3$Cardiovascular)
df3$Respiratory.s <- as.numeric(df3$Respiratory)
df3$Other.s <- as.numeric(df3$Other)
df3$Gastrointestinal.s <-as.numeric(df3$Gastrointestinal)
df3<- df3 %>% group_by_(~State) %>% summarise(Gastrointestinal = sum(Gastrointestinal.s), Eye = sum(Eye.s), Nervous.System = sum(Nervous.System.s),
Musculoskeletal = sum(Musculoskeletal.s),Genitourinary = sum(Genitourinary.s),Skin = sum(Skin.s),
Cardiovascular = sum(Cardiovascular.s), Respiratory = sum(Respiratory.s), Other = sum(Other.s)) %>%
mutate(sum = Gastrointestinal + Eye + Nervous.System +Musculoskeletal + Genitourinary + Skin +Cardiovascular + Respiratory + Other)
#get the  y variable as string
y.equation <- paste0('~', yvar)
#plot the bar chart, and set the size based on the sum of the total number of surgery, and the color based on the states.
#Display the percentage of each state based on their own total number of procedures.
p<-plot_ly(df3, x = df3$State, y = eval(parse(text = y.equation)), color = df3$State,
size = df3$sum,
text = ~paste('Percentage:',round(as.double(as.numeric(df3[,eval(yvar)]))*100/df3$sum,digit = 2),'%'))%>%
layout(title = paste0("Comparison of diffent types of surgery in State level "),
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
return(p)
}
runApp()
#Load the package we need for this chart
library(plotly)
library(shiny)
library(stringr)
library(dplyr)
#Build a bar chart based on the state level for comparison.
BuildBar.state <- function(yvar){
#We need transfer the value in the data set to the numeric value in order to do the calculation and the arrangement
#Then, we group the data by state and create replace the original data frame based on the state level.
#Create a sum level that has the total of procedures based on the state level.
df3$Eye.s <- as.numeric(df3$Eye)
df3$Nervous.System.s <-as.numeric(df3$Nervous.System)
df3$Musculoskeletal.s <- as.numeric(df3$Musculoskeletal)
df3$Genitourinary.s <-as.numeric(df3$Genitourinary)
df3$Skin.s <-as.numeric(df3$Skin)
df3$Cardiovascular.s <-as.numeric(df3$Cardiovascular)
df3$Respiratory.s <- as.numeric(df3$Respiratory)
df3$Other.s <- as.numeric(df3$Other)
df3$Gastrointestinal.s <-as.numeric(df3$Gastrointestinal)
df3<- df3 %>% group_by_(~State) %>% summarise(Gastrointestinal = sum(Gastrointestinal.s), Eye = sum(Eye.s), Nervous.System = sum(Nervous.System.s),
Musculoskeletal = sum(Musculoskeletal.s),Genitourinary = sum(Genitourinary.s),Skin = sum(Skin.s),
Cardiovascular = sum(Cardiovascular.s), Respiratory = sum(Respiratory.s), Other = sum(Other.s)) %>%
mutate(sum = Gastrointestinal + Eye + Nervous.System +Musculoskeletal + Genitourinary + Skin +Cardiovascular + Respiratory + Other)
#get the  y variable as string
y.equation <- paste0('~', yvar)
#plot the bar chart, and set the size based on the sum of the total number of surgery, and the color based on the states.
#Display the percentage of each state based on their own total number of procedures.
p<-plot_ly(df3, x = df3$State, y = eval(parse(text = y.equation)), color = df3$State,
size = df3$sum,
text = ~paste('Percentage:',round(as.numeric(unlist(df3[,eval(yvar)]))*100/df3$sum,digit = 2),'%'))%>%
layout(title = paste0("Comparison of diffent types of surgery in State level "),
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
return(p)
}
runApp()
#Load the package we need for this chart
library(plotly)
library(shiny)
library(stringr)
library(dplyr)
#Build a bar chart based on the state level for comparison.
BuildBar.state <- function(yvar){
#We need transfer the value in the data set to the numeric value in order to do the calculation and the arrangement
#Then, we group the data by state and create replace the original data frame based on the state level.
#Create a sum level that has the total of procedures based on the state level.
df3$Eye.s <- as.numeric(df3$Eye)
df3$Nervous.System.s <-as.numeric(df3$Nervous.System)
df3$Musculoskeletal.s <- as.numeric(df3$Musculoskeletal)
df3$Genitourinary.s <-as.numeric(df3$Genitourinary)
df3$Skin.s <-as.numeric(df3$Skin)
df3$Cardiovascular.s <-as.numeric(df3$Cardiovascular)
df3$Respiratory.s <- as.numeric(df3$Respiratory)
df3$Other.s <- as.numeric(df3$Other)
df3$Gastrointestinal.s <-as.numeric(df3$Gastrointestinal)
df3<- df3 %>% group_by_(~State) %>% summarise(Gastrointestinal = sum(Gastrointestinal.s), Eye = sum(Eye.s), Nervous.System = sum(Nervous.System.s),
Musculoskeletal = sum(Musculoskeletal.s),Genitourinary = sum(Genitourinary.s),Skin = sum(Skin.s),
Cardiovascular = sum(Cardiovascular.s), Respiratory = sum(Respiratory.s), Other = sum(Other.s)) %>%
mutate(sum = Gastrointestinal + Eye + Nervous.System +Musculoskeletal + Genitourinary + Skin +Cardiovascular + Respiratory + Other)
#get the  y variable as string
y.equation <- paste0('~', yvar)
#plot the bar chart, and set the size based on the sum of the total number of surgery, and the color based on the states.
#Display the percentage of each state based on their own total number of procedures.
p<-plot_ly(df3, x = df3$State, y = eval(parse(text = y.equation)), color = df3$State,
size = df3$sum,
text = paste('Percentage:',round(as.numeric(unlist(df3[,eval(yvar)]))*100/df3$sum,digit = 2),'%'))%>%
layout(title = paste0("Comparison of different types of surgery in State level "),
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
return(p)
}
runApp()
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = ~carat, y = ~price, color = ~carat,
size = ~carat, text = ~paste("HI: ", clarity))
runApp('C:/Users/Sony/Downloads/INFO/a8-building-apps-chendiva')
runApp('C:/Users/Sony/Downloads/INFO/a8-building-apps-chendiva')
runApp()
